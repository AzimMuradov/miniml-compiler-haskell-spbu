[{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TimedValue\">TimedValue</a> a = <a href=\"#v:TimedValue\">TimedValue</a> {<ul class=\"subs\"><li><a href=\"#v:value\">value</a> :: a</li><li><a href=\"#v:time\">time</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li></ul>}","name":"TimedValue TimedValue value time","module":"CodeGen.TimedValue","link":"CodeGen-TimedValue.html#t:TimedValue"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Nanoseconds\">Nanoseconds</a> = <a href=\"#v:Nanoseconds\">Nanoseconds</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"Nanoseconds Nanoseconds","module":"CodeGen.TimedValue","link":"CodeGen-TimedValue.html#t:Nanoseconds"},{"display_html":"<a href=\"#v:measureTimedValue\">measureTimedValue</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> a -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> (<a href=\"CodeGen-TimedValue.html#t:TimedValue\" title=\"CodeGen.TimedValue\">TimedValue</a> a)","name":"measureTimedValue","module":"CodeGen.TimedValue","link":"CodeGen-TimedValue.html#v:measureTimedValue"},{"display_html":"<a href=\"#v:measureTime\">measureTime</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> () -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a>","name":"measureTime","module":"CodeGen.TimedValue","link":"CodeGen-TimedValue.html#v:measureTime"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:RunResult\">RunResult</a><ul class=\"subs\"><li>= <a href=\"#v:Success\">Success</a> { <ul class=\"subs\"><li><a href=\"#v:stdout\">stdout</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a></li><li><a href=\"#v:compTime\">compTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li><li><a href=\"#v:runTime\">runTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li></ul> }</li><li>| <a href=\"#v:CompilationError\">CompilationError</a> { <ul class=\"subs\"><li><a href=\"#v:compErrMsg\">compErrMsg</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a></li><li><a href=\"#v:compTime\">compTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li></ul> }</li><li>| <a href=\"#v:RuntimeError\">RuntimeError</a> { <ul class=\"subs\"><li><a href=\"#v:stdout\">stdout</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a></li><li><a href=\"#v:stderr\">stderr</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a></li><li><a href=\"#v:exitCode\">exitCode</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a></li><li><a href=\"#v:compTime\">compTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li><li><a href=\"#v:runTime\">runTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li></ul> }</li></ul>","name":"RunResult RuntimeError CompilationError Success exitCode compErrMsg runTime compTime stderr stdout","module":"CodeGen.RunResult","link":"CodeGen-RunResult.html#t:RunResult"},{"display_html":"<a href=\"#v:liftM1-39-\">liftM1'</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; (a' -&gt; m a) -&gt; (a -&gt; b) -&gt; a' -&gt; m b","name":"liftM1'","module":"MonadUtils","link":"MonadUtils.html#v:liftM1-39-"},{"display_html":"<a href=\"#v:liftM2-39-\">liftM2'</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; (a' -&gt; m a) -&gt; (a -&gt; a -&gt; b) -&gt; a' -&gt; a' -&gt; m b","name":"liftM2'","module":"MonadUtils","link":"MonadUtils.html#v:liftM2-39-"},{"display_html":"<a href=\"#v:liftM3-39-\">liftM3'</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; (a' -&gt; m a) -&gt; (a -&gt; a -&gt; a -&gt; b) -&gt; a' -&gt; a' -&gt; a' -&gt; m b","name":"liftM3'","module":"MonadUtils","link":"MonadUtils.html#v:liftM3-39-"},{"display_html":"<a href=\"#v:locally\">locally</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> s m =&gt; m a -&gt; m a","name":"locally","module":"MonadUtils","link":"MonadUtils.html#v:locally"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Identifier\">Identifier</a> = <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"Identifier","module":"Trees.Common","link":"Trees-Common.html#t:Identifier"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Identifier-39-\">Identifier'</a><ul class=\"subs\"><li>= <a href=\"#v:Txt\">Txt</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a></li><li>| <a href=\"#v:Gen\">Gen</a> <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a></li></ul>","name":"Identifier' Gen Txt","module":"Trees.Common","link":"Trees-Common.html#t:Identifier-39-"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:IdCnt\">IdCnt</a> = <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a>","name":"IdCnt","module":"Trees.Common","link":"Trees-Common.html#t:IdCnt"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:BinaryOperator\">BinaryOperator</a><ul class=\"subs\"><li>= <a href=\"#v:BoolOp\">BoolOp</a> <a href=\"Trees-Common.html#t:BooleanOperator\" title=\"Trees.Common\">BooleanOperator</a></li><li>| <a href=\"#v:ArithOp\">ArithOp</a> <a href=\"Trees-Common.html#t:ArithmeticOperator\" title=\"Trees.Common\">ArithmeticOperator</a></li><li>| <a href=\"#v:CompOp\">CompOp</a> <a href=\"Trees-Common.html#t:ComparisonOperator\" title=\"Trees.Common\">ComparisonOperator</a></li></ul>","name":"BinaryOperator CompOp ArithOp BoolOp","module":"Trees.Common","link":"Trees-Common.html#t:BinaryOperator"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UnaryOperator\">UnaryOperator</a> = <a href=\"#v:UnMinusOp\">UnMinusOp</a>","name":"UnaryOperator UnMinusOp","module":"Trees.Common","link":"Trees-Common.html#t:UnaryOperator"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:BooleanOperator\">BooleanOperator</a><ul class=\"subs\"><li>= <a href=\"#v:AndOp\">AndOp</a></li><li>| <a href=\"#v:OrOp\">OrOp</a></li></ul>","name":"BooleanOperator OrOp AndOp","module":"Trees.Common","link":"Trees-Common.html#t:BooleanOperator"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ArithmeticOperator\">ArithmeticOperator</a><ul class=\"subs\"><li>= <a href=\"#v:PlusOp\">PlusOp</a></li><li>| <a href=\"#v:MinusOp\">MinusOp</a></li><li>| <a href=\"#v:MulOp\">MulOp</a></li><li>| <a href=\"#v:DivOp\">DivOp</a></li></ul>","name":"ArithmeticOperator DivOp MulOp MinusOp PlusOp","module":"Trees.Common","link":"Trees-Common.html#t:ArithmeticOperator"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ComparisonOperator\">ComparisonOperator</a><ul class=\"subs\"><li>= <a href=\"#v:EqOp\">EqOp</a></li><li>| <a href=\"#v:NeOp\">NeOp</a></li><li>| <a href=\"#v:LtOp\">LtOp</a></li><li>| <a href=\"#v:LeOp\">LeOp</a></li><li>| <a href=\"#v:GtOp\">GtOp</a></li><li>| <a href=\"#v:GeOp\">GeOp</a></li></ul>","name":"ComparisonOperator GeOp GtOp LeOp LtOp NeOp EqOp","module":"Trees.Common","link":"Trees-Common.html#t:ComparisonOperator"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:IsRec\">IsRec</a> = <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>","name":"IsRec","module":"Trees.Common","link":"Trees-Common.html#t:IsRec"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Type\">Type</a><ul class=\"subs\"><li>= <a href=\"#v:TUnit\">TUnit</a></li><li>| <a href=\"#v:TBool\">TBool</a></li><li>| <a href=\"#v:TInt\">TInt</a></li><li>| <a href=\"#v:TFun\">TFun</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a></li></ul>","name":"Type TFun TInt TBool TUnit","module":"Trees.Common","link":"Trees-Common.html#t:Type"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Arity\">Arity</a> = <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a>","name":"Arity","module":"Trees.Common","link":"Trees-Common.html#t:Arity"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:PrimitiveValue\">PrimitiveValue</a><ul class=\"subs\"><li>= <a href=\"#v:PrimValUnit\">PrimValUnit</a></li><li>| <a href=\"#v:PrimValBool\">PrimValBool</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li><li>| <a href=\"#v:PrimValInt\">PrimValInt</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a></li></ul>","name":"PrimitiveValue PrimValInt PrimValBool PrimValUnit","module":"Trees.Common","link":"Trees-Common.html#t:PrimitiveValue"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Program\">Program</a> = <a href=\"#v:Program\">Program</a> [<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a>] <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a>","name":"Program Program","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#t:Program"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Declaration\">Declaration</a><ul class=\"subs\"><li>= <a href=\"#v:DeclVar\">DeclVar</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:DeclFun\">DeclFun</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Trees-Common.html#t:IsRec\" title=\"Trees.Common\">IsRec</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Fun\" title=\"Transformations.Simplifier.SimplifiedAst\">Fun</a></li></ul>","name":"Declaration DeclFun DeclVar","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#t:Declaration"},{"display_html":"<a href=\"#v:declId\">declId</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a> -&gt; <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"declId","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#v:declId"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Expression\">Expression</a><ul class=\"subs\"><li>= <a href=\"#v:ExprId\">ExprId</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a></li><li>| <a href=\"#v:ExprPrimVal\">ExprPrimVal</a> <a href=\"Trees-Common.html#t:PrimitiveValue\" title=\"Trees.Common\">PrimitiveValue</a></li><li>| <a href=\"#v:ExprBinOp\">ExprBinOp</a> <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprUnOp\">ExprUnOp</a> <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprApp\">ExprApp</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprIte\">ExprIte</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprLetIn\">ExprLetIn</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprFun\">ExprFun</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Fun\" title=\"Transformations.Simplifier.SimplifiedAst\">Fun</a></li></ul>","name":"Expression ExprFun ExprLetIn ExprIte ExprApp ExprUnOp ExprBinOp ExprPrimVal ExprId","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#t:Expression"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Fun\">Fun</a> = <a href=\"#v:Fun\">Fun</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>) <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a>","name":"Fun Fun","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#t:Fun"},{"display_html":"<a href=\"#v:relabelAst\">relabelAst</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a>","name":"relabelAst","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:relabelAst"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:RelabelerState\">RelabelerState</a> = <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html#t:State\" title=\"Control.Monad.State.Lazy\">State</a> <a href=\"Transformations-Relabeler-Relabeler.html#t:Env\" title=\"Transformations.Relabeler.Relabeler\">Env</a>","name":"RelabelerState","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#t:RelabelerState"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Env\">Env</a> = <a href=\"#v:Env\">Env</a> {<ul class=\"subs\"><li><a href=\"#v:idMappings\">idMappings</a> :: [<a href=\"Transformations-Relabeler-Relabeler.html#t:IdMapping\" title=\"Transformations.Relabeler.Relabeler\">IdMapping</a>]</li><li><a href=\"#v:idCnt\">idCnt</a> :: <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a></li></ul>}","name":"Env Env idCnt idMappings","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#t:Env"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:IdMapping\">IdMapping</a> = (<a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>, <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>)","name":"IdMapping","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#t:IdMapping"},{"display_html":"<a href=\"#v:relabelDecl\">relabelDecl</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a> -&gt; <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a>","name":"relabelDecl","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:relabelDecl"},{"display_html":"<a href=\"#v:relabelExpr\">relabelExpr</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a>","name":"relabelExpr","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:relabelExpr"},{"display_html":"<a href=\"#v:relabelFun\">relabelFun</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Fun\" title=\"Transformations.Simplifier.SimplifiedAst\">Fun</a> -&gt; <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Fun\" title=\"Transformations.Simplifier.SimplifiedAst\">Fun</a>","name":"relabelFun","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:relabelFun"},{"display_html":"<a href=\"#v:mapId\">mapId</a> :: <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"mapId","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:mapId"},{"display_html":"<a href=\"#v:pushAndMapId\">pushAndMapId</a> :: <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"pushAndMapId","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:pushAndMapId"},{"display_html":"<a href=\"#v:pushId\">pushId</a> :: <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> ()","name":"pushId","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:pushId"},{"display_html":"<a href=\"#v:popId\">popId</a> :: <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> ()","name":"popId","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:popId"},{"display_html":"<a href=\"#v:relabel1\">relabel1</a> :: (<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; a) -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> a","name":"relabel1","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:relabel1"},{"display_html":"<a href=\"#v:relabel2\">relabel2</a> :: (<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; a) -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> a","name":"relabel2","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:relabel2"},{"display_html":"<a href=\"#v:relabel3\">relabel3</a> :: (<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; a) -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Relabeler-Relabeler.html#t:RelabelerState\" title=\"Transformations.Relabeler.Relabeler\">RelabelerState</a> a","name":"relabel3","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:relabel3"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Program\">Program</a> = <a href=\"#v:Program\">Program</a> [<a href=\"Transformations-Ll-Lfr.html#t:GlobalDeclaration\" title=\"Transformations.Ll.Lfr\">GlobalDeclaration</a>] <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a>","name":"Program Program","module":"Transformations.Ll.Lfr","link":"Transformations-Ll-Lfr.html#t:Program"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:GlobalDeclaration\">GlobalDeclaration</a><ul class=\"subs\"><li>= <a href=\"#v:GlobVarDecl\">GlobVarDecl</a> <a href=\"Transformations-Ll-Lfr.html#t:VarDeclaration\" title=\"Transformations.Ll.Lfr\">VarDeclaration</a></li><li>| <a href=\"#v:GlobFunDecl\">GlobFunDecl</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> [<a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>] <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li></ul>","name":"GlobalDeclaration GlobFunDecl GlobVarDecl","module":"Transformations.Ll.Lfr","link":"Transformations-Ll-Lfr.html#t:GlobalDeclaration"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:VarDeclaration\">VarDeclaration</a> = <a href=\"#v:VarDecl\">VarDecl</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a>","name":"VarDeclaration VarDecl","module":"Transformations.Ll.Lfr","link":"Transformations-Ll-Lfr.html#t:VarDeclaration"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Expression\">Expression</a><ul class=\"subs\"><li>= <a href=\"#v:ExprId\">ExprId</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a></li><li>| <a href=\"#v:ExprPrimVal\">ExprPrimVal</a> <a href=\"Trees-Common.html#t:PrimitiveValue\" title=\"Trees.Common\">PrimitiveValue</a></li><li>| <a href=\"#v:ExprBinOp\">ExprBinOp</a> <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li><li>| <a href=\"#v:ExprUnOp\">ExprUnOp</a> <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li><li>| <a href=\"#v:ExprApp\">ExprApp</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li><li>| <a href=\"#v:ExprIte\">ExprIte</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li><li>| <a href=\"#v:ExprLetIn\">ExprLetIn</a> <a href=\"Transformations-Ll-Lfr.html#t:VarDeclaration\" title=\"Transformations.Ll.Lfr\">VarDeclaration</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li></ul>","name":"Expression ExprLetIn ExprIte ExprApp ExprUnOp ExprBinOp ExprPrimVal ExprId","module":"Transformations.Ll.Lfr","link":"Transformations-Ll-Lfr.html#t:Expression"},{"display_html":"<a href=\"#v:llAst\">llAst</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a> -&gt; <a href=\"Transformations-Ll-Lfr.html#t:Program\" title=\"Transformations.Ll.Lfr\">Program</a>","name":"llAst","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#v:llAst"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:LlState\">LlState</a> = <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html#t:State\" title=\"Control.Monad.State.Lazy\">State</a> <a href=\"Transformations-Ll-Ll.html#t:Env\" title=\"Transformations.Ll.Ll\">Env</a>","name":"LlState","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#t:LlState"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Env\">Env</a> = <a href=\"#v:Env\">Env</a> {<ul class=\"subs\"><li><a href=\"#v:genFunDecls\">genFunDecls</a> :: [<a href=\"Transformations-Ll-Ll.html#t:FunDeclaration\" title=\"Transformations.Ll.Ll\">FunDeclaration</a>]</li><li><a href=\"#v:idCnt\">idCnt</a> :: <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a></li></ul>}","name":"Env Env genFunDecls idCnt","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#t:Env"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:FunDeclaration\">FunDeclaration</a> = <a href=\"#v:FunDecl\">FunDecl</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> [<a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>] <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a>","name":"FunDeclaration FunDecl","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#t:FunDeclaration"},{"display_html":"<a href=\"#v:llGDecl\">llGDecl</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a> -&gt; <a href=\"Transformations-Ll-Ll.html#t:LlState\" title=\"Transformations.Ll.Ll\">LlState</a> [<a href=\"Transformations-Ll-Lfr.html#t:GlobalDeclaration\" title=\"Transformations.Ll.Lfr\">GlobalDeclaration</a>]","name":"llGDecl","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#v:llGDecl"},{"display_html":"<a href=\"#v:llExpr\">llExpr</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Ll-Ll.html#t:LlState\" title=\"Transformations.Ll.Ll\">LlState</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a>","name":"llExpr","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#v:llExpr"},{"display_html":"<a href=\"#v:llFun\">llFun</a> :: <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Fun\" title=\"Transformations.Simplifier.SimplifiedAst\">Fun</a> -&gt; <a href=\"Transformations-Ll-Ll.html#t:LlState\" title=\"Transformations.Ll.Ll\">LlState</a> ()","name":"llFun","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#v:llFun"},{"display_html":"<a href=\"#v:genId\">genId</a> :: <a href=\"Transformations-Ll-Ll.html#t:LlState\" title=\"Transformations.Ll.Ll\">LlState</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"genId","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#v:genId"},{"display_html":"<a href=\"#v:ll1\">ll1</a> :: (<a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> -&gt; a) -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Ll-Ll.html#t:LlState\" title=\"Transformations.Ll.Ll\">LlState</a> a","name":"ll1","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#v:ll1"},{"display_html":"<a href=\"#v:ll2\">ll2</a> :: (<a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> -&gt; <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> -&gt; a) -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Ll-Ll.html#t:LlState\" title=\"Transformations.Ll.Ll\">LlState</a> a","name":"ll2","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#v:ll2"},{"display_html":"<a href=\"#v:ll3\">ll3</a> :: (<a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> -&gt; <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> -&gt; <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> -&gt; a) -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Ll-Ll.html#t:LlState\" title=\"Transformations.Ll.Ll\">LlState</a> a","name":"ll3","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#v:ll3"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Program\">Program</a> = <a href=\"#v:Program\">Program</a> [<a href=\"Transformations-Anf-Anf.html#t:GlobalDeclaration\" title=\"Transformations.Anf.Anf\">GlobalDeclaration</a>]","name":"Program Program","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:Program"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:GlobalDeclaration\">GlobalDeclaration</a><ul class=\"subs\"><li>= <a href=\"#v:GlobVarDecl\">GlobVarDecl</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a></li><li>| <a href=\"#v:GlobFunDecl\">GlobFunDecl</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> [<a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>] <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a></li></ul>","name":"GlobalDeclaration GlobFunDecl GlobVarDecl","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:GlobalDeclaration"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Expression\">Expression</a><ul class=\"subs\"><li>= <a href=\"#v:ExprAtom\">ExprAtom</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a></li><li>| <a href=\"#v:ExprComp\">ExprComp</a> <a href=\"Transformations-Anf-Anf.html#t:ComplexExpression\" title=\"Transformations.Anf.Anf\">ComplexExpression</a></li><li>| <a href=\"#v:ExprLetIn\">ExprLetIn</a> (<a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>, <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a>) <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a></li></ul>","name":"Expression ExprComp ExprAtom ExprLetIn","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:Expression"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:AtomicExpression\">AtomicExpression</a><ul class=\"subs\"><li>= <a href=\"#v:AtomId\">AtomId</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a></li><li>| <a href=\"#v:AtomUnit\">AtomUnit</a></li><li>| <a href=\"#v:AtomBool\">AtomBool</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li><li>| <a href=\"#v:AtomInt\">AtomInt</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a></li></ul>","name":"AtomicExpression AtomInt AtomBool AtomUnit AtomId","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:AtomicExpression"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ComplexExpression\">ComplexExpression</a><ul class=\"subs\"><li>= <a href=\"#v:CompApp\">CompApp</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a></li><li>| <a href=\"#v:CompIte\">CompIte</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a> <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a> <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a></li><li>| <a href=\"#v:CompBinOp\">CompBinOp</a> <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a></li><li>| <a href=\"#v:CompUnOp\">CompUnOp</a> <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a></li></ul>","name":"ComplexExpression CompUnOp CompBinOp CompIte CompApp","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:ComplexExpression"},{"display_html":"<a href=\"#v:prettyPrint\">prettyPrint</a> :: <a href=\"Transformations-Anf-Anf.html#t:Program\" title=\"Transformations.Anf.Anf\">Program</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"prettyPrint","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:prettyPrint"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:IndentState\">IndentState</a> = <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html#t:State\" title=\"Control.Monad.State.Lazy\">State</a> <a href=\"Transformations-Anf-PrettyPrinter.html#t:IndentLevel\" title=\"Transformations.Anf.PrettyPrinter\">IndentLevel</a>","name":"IndentState","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#t:IndentState"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:IndentLevel\">IndentLevel</a> = <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a>","name":"IndentLevel","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#t:IndentLevel"},{"display_html":"<a href=\"#v:prettyDecl\">prettyDecl</a> :: <a href=\"Transformations-Anf-Anf.html#t:GlobalDeclaration\" title=\"Transformations.Anf.Anf\">GlobalDeclaration</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"prettyDecl","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:prettyDecl"},{"display_html":"<a href=\"#v:prettyExpr\">prettyExpr</a> :: <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a> -&gt; <a href=\"Transformations-Anf-PrettyPrinter.html#t:IndentState\" title=\"Transformations.Anf.PrettyPrinter\">IndentState</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"prettyExpr","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:prettyExpr"},{"display_html":"<a href=\"#v:prettyComplex\">prettyComplex</a> :: <a href=\"Transformations-Anf-Anf.html#t:ComplexExpression\" title=\"Transformations.Anf.Anf\">ComplexExpression</a> -&gt; <a href=\"Transformations-Anf-PrettyPrinter.html#t:IndentState\" title=\"Transformations.Anf.PrettyPrinter\">IndentState</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"prettyComplex","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:prettyComplex"},{"display_html":"<a href=\"#v:prettyAtomic\">prettyAtomic</a> :: <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"prettyAtomic","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:prettyAtomic"},{"display_html":"<a href=\"#v:prettyId\">prettyId</a> :: <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"prettyId","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:prettyId"},{"display_html":"<a href=\"#v:prettyBinOp\">prettyBinOp</a> :: <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"prettyBinOp","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:prettyBinOp"},{"display_html":"<a href=\"#v:prettyUnOp\">prettyUnOp</a> :: <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"prettyUnOp","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:prettyUnOp"},{"display_html":"<a href=\"#v:createIndent\">createIndent</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"createIndent","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:createIndent"},{"display_html":"<a href=\"#v:parens\">parens</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"parens","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:parens"},{"display_html":"<a href=\"#v:genAnf\">genAnf</a> :: <a href=\"Transformations-Ll-Lfr.html#t:Program\" title=\"Transformations.Ll.Lfr\">Program</a> -&gt; <a href=\"Transformations-Anf-Anf.html#t:Program\" title=\"Transformations.Anf.Anf\">Program</a>","name":"genAnf","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#v:genAnf"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:NormCont\">NormCont</a> r a = <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Cont.html#t:ContT\" title=\"Control.Monad.Cont\">ContT</a> r <a href=\"Transformations-Anf-AnfGen.html#t:AnfGenState\" title=\"Transformations.Anf.AnfGen\">AnfGenState</a> a","name":"NormCont","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#t:NormCont"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:AnfGenState\">AnfGenState</a> = <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html#t:State\" title=\"Control.Monad.State.Lazy\">State</a> <a href=\"Transformations-Anf-AnfGen.html#t:Env\" title=\"Transformations.Anf.AnfGen\">Env</a>","name":"AnfGenState","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#t:AnfGenState"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Env\">Env</a> = <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a>","name":"Env","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#t:Env"},{"display_html":"<a href=\"#v:genDecl\">genDecl</a> :: <a href=\"Transformations-Ll-Lfr.html#t:GlobalDeclaration\" title=\"Transformations.Ll.Lfr\">GlobalDeclaration</a> -&gt; <a href=\"Transformations-Anf-AnfGen.html#t:AnfGenState\" title=\"Transformations.Anf.AnfGen\">AnfGenState</a> <a href=\"Transformations-Anf-Anf.html#t:GlobalDeclaration\" title=\"Transformations.Anf.Anf\">GlobalDeclaration</a>","name":"genDecl","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#v:genDecl"},{"display_html":"<a href=\"#v:genExpr\">genExpr</a> :: <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> -&gt; <a href=\"Transformations-Anf-AnfGen.html#t:AnfGenState\" title=\"Transformations.Anf.AnfGen\">AnfGenState</a> <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a>","name":"genExpr","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#v:genExpr"},{"display_html":"<a href=\"#v:returnAtom\">returnAtom</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"Transformations-Anf-AnfGen.html#t:Env\" title=\"Transformations.Anf.AnfGen\">Env</a> m =&gt; <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a> -&gt; m <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a>","name":"returnAtom","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#v:returnAtom"},{"display_html":"<a href=\"#v:returnComplex\">returnComplex</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"Transformations-Anf-AnfGen.html#t:Env\" title=\"Transformations.Anf.AnfGen\">Env</a> m =&gt; <a href=\"Transformations-Anf-Anf.html#t:ComplexExpression\" title=\"Transformations.Anf.Anf\">ComplexExpression</a> -&gt; m <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a>","name":"returnComplex","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#v:returnComplex"},{"display_html":"<a href=\"#v:normalizeToAtom\">normalizeToAtom</a> :: <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> -&gt; <a href=\"Transformations-Anf-AnfGen.html#t:NormCont\" title=\"Transformations.Anf.AnfGen\">NormCont</a> <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a>","name":"normalizeToAtom","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#v:normalizeToAtom"},{"display_html":"<a href=\"#v:normalizeToId\">normalizeToId</a> :: <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> -&gt; <a href=\"Transformations-Anf-AnfGen.html#t:NormCont\" title=\"Transformations.Anf.AnfGen\">NormCont</a> <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"normalizeToId","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#v:normalizeToId"},{"display_html":"<a href=\"#v:genId\">genId</a> :: <a href=\"Transformations-Anf-AnfGen.html#t:AnfGenState\" title=\"Transformations.Anf.AnfGen\">AnfGenState</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"genId","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#v:genId"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:TypedDeclaration\">TypedDeclaration</a> = (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>)","name":"TypedDeclaration","module":"StdLib","link":"StdLib.html#t:TypedDeclaration"},{"display_html":"<a href=\"#v:typedDecls\">typedDecls</a> :: [<a href=\"StdLib.html#t:TypedDeclaration\" title=\"StdLib\">TypedDeclaration</a>]","name":"typedDecls","module":"StdLib","link":"StdLib.html#v:typedDecls"},{"display_html":"<a href=\"#v:decls\">decls</a> :: [<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>]","name":"decls","module":"StdLib","link":"StdLib.html#v:decls"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:DeclarationWithArity\">DeclarationWithArity</a> = (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"Trees-Common.html#t:Arity\" title=\"Trees.Common\">Arity</a>)","name":"DeclarationWithArity","module":"StdLib","link":"StdLib.html#t:DeclarationWithArity"},{"display_html":"<a href=\"#v:allDeclsWithArity\">allDeclsWithArity</a> :: [<a href=\"StdLib.html#t:DeclarationWithArity\" title=\"StdLib\">DeclarationWithArity</a>]","name":"allDeclsWithArity","module":"StdLib","link":"StdLib.html#v:allDeclsWithArity"},{"display_html":"<a href=\"#v:notDecl\">notDecl</a> :: <a href=\"StdLib.html#t:TypedDeclaration\" title=\"StdLib\">TypedDeclaration</a>","name":"notDecl","module":"StdLib","link":"StdLib.html#v:notDecl"},{"display_html":"<a href=\"#v:printBoolDecl\">printBoolDecl</a> :: <a href=\"StdLib.html#t:TypedDeclaration\" title=\"StdLib\">TypedDeclaration</a>","name":"printBoolDecl","module":"StdLib","link":"StdLib.html#v:printBoolDecl"},{"display_html":"<a href=\"#v:printIntDecl\">printIntDecl</a> :: <a href=\"StdLib.html#t:TypedDeclaration\" title=\"StdLib\">TypedDeclaration</a>","name":"printIntDecl","module":"StdLib","link":"StdLib.html#v:printIntDecl"},{"display_html":"<a href=\"#v:divDecl\">divDecl</a> :: <a href=\"StdLib.html#t:DeclarationWithArity\" title=\"StdLib\">DeclarationWithArity</a>","name":"divDecl","module":"StdLib","link":"StdLib.html#v:divDecl"},{"display_html":"<a href=\"#v:funToPafDecl\">funToPafDecl</a> :: <a href=\"StdLib.html#t:DeclarationWithArity\" title=\"StdLib\">DeclarationWithArity</a>","name":"funToPafDecl","module":"StdLib","link":"StdLib.html#v:funToPafDecl"},{"display_html":"<a href=\"#v:applyDecl\">applyDecl</a> :: <a href=\"StdLib.html#t:DeclarationWithArity\" title=\"StdLib\">DeclarationWithArity</a>","name":"applyDecl","module":"StdLib","link":"StdLib.html#v:applyDecl"},{"display_html":"<a href=\"#v:ccAst\">ccAst</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a>","name":"ccAst","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:ccAst"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:CcInfo\">CcInfo</a> = <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Reader.html#t:Reader\" title=\"Control.Monad.Reader\">Reader</a> <a href=\"Transformations-Cc-Cc.html#t:Env\" title=\"Transformations.Cc.Cc\">Env</a>","name":"CcInfo","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#t:CcInfo"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Env\">Env</a> = <a href=\"#v:Env\">Env</a> {<ul class=\"subs\"><li><a href=\"#v:globalIds\">globalIds</a> :: <a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Set-Internal.html#t:Set\" title=\"Data.Set.Internal\">Set</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a></li><li><a href=\"#v:declIdMappings\">declIdMappings</a> :: <a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Map-Internal.html#t:Map\" title=\"Data.Map.Internal\">Map</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li></ul>}","name":"Env Env declIdMappings globalIds","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#t:Env"},{"display_html":"<a href=\"#v:ccGDecl\">ccGDecl</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a> -&gt; <a href=\"Transformations-Cc-Cc.html#t:CcInfo\" title=\"Transformations.Cc.Cc\">CcInfo</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a>","name":"ccGDecl","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:ccGDecl"},{"display_html":"<a href=\"#v:ccExpr\">ccExpr</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Cc-Cc.html#t:CcInfo\" title=\"Transformations.Cc.Cc\">CcInfo</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a>","name":"ccExpr","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:ccExpr"},{"display_html":"<a href=\"#v:findFv\">findFv</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Set-Internal.html#t:Set\" title=\"Data.Set.Internal\">Set</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"findFv","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:findFv"},{"display_html":"<a href=\"#v:toSet\">toSet</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Ord.html#t:Ord\" title=\"Data.Ord\">Ord</a> a =&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> a -&gt; <a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Set-Internal.html#t:Set\" title=\"Data.Set.Internal\">Set</a> a","name":"toSet","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:toSet"},{"display_html":"<a href=\"#v:prependList\">prependList</a> :: [a] -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> a -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> a","name":"prependList","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:prependList"},{"display_html":"<a href=\"#v:cc1\">cc1</a> :: (<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; a) -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Cc-Cc.html#t:CcInfo\" title=\"Transformations.Cc.Cc\">CcInfo</a> a","name":"cc1","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:cc1"},{"display_html":"<a href=\"#v:cc2\">cc2</a> :: (<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; a) -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Cc-Cc.html#t:CcInfo\" title=\"Transformations.Cc.Cc\">CcInfo</a> a","name":"cc2","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:cc2"},{"display_html":"<a href=\"#v:cc3\">cc3</a> :: (<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; a) -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Cc-Cc.html#t:CcInfo\" title=\"Transformations.Cc.Cc\">CcInfo</a> a","name":"cc3","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:cc3"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Parser\">Parser</a> = <a href=\"https://hackage.haskell.org/package/megaparsec-9.2.1/docs/Text-Megaparsec.html#t:Parsec\" title=\"Text.Megaparsec\">Parsec</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Void.html#t:Void\" title=\"Data.Void\">Void</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"Parser","module":"Parser.Lexer","link":"Parser-Lexer.html#t:Parser"},{"display_html":"<a href=\"#v:sc\">sc</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> ()","name":"sc","module":"Parser.Lexer","link":"Parser-Lexer.html#v:sc"},{"display_html":"<a href=\"#v:lexeme\">lexeme</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"lexeme","module":"Parser.Lexer","link":"Parser-Lexer.html#v:lexeme"},{"display_html":"<a href=\"#v:symbol\">symbol</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"symbol","module":"Parser.Lexer","link":"Parser-Lexer.html#v:symbol"},{"display_html":"<a href=\"#v:colon\">colon</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"colon","module":"Parser.Lexer","link":"Parser-Lexer.html#v:colon"},{"display_html":"<a href=\"#v:semicolon2\">semicolon2</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"semicolon2","module":"Parser.Lexer","link":"Parser-Lexer.html#v:semicolon2"},{"display_html":"<a href=\"#v:arrow\">arrow</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"arrow","module":"Parser.Lexer","link":"Parser-Lexer.html#v:arrow"},{"display_html":"<a href=\"#v:eq\">eq</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"eq","module":"Parser.Lexer","link":"Parser-Lexer.html#v:eq"},{"display_html":"<a href=\"#v:leftPar\">leftPar</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"leftPar","module":"Parser.Lexer","link":"Parser-Lexer.html#v:leftPar"},{"display_html":"<a href=\"#v:rightPar\">rightPar</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"rightPar","module":"Parser.Lexer","link":"Parser-Lexer.html#v:rightPar"},{"display_html":"<a href=\"#v:unitLitP\">unitLitP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"unitLitP","module":"Parser.Lexer","link":"Parser-Lexer.html#v:unitLitP"},{"display_html":"<a href=\"#v:boolLitP\">boolLitP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>","name":"boolLitP","module":"Parser.Lexer","link":"Parser-Lexer.html#v:boolLitP"},{"display_html":"<a href=\"#v:intLitP\">intLitP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a>","name":"intLitP","module":"Parser.Lexer","link":"Parser-Lexer.html#v:intLitP"},{"display_html":"<a href=\"#v:identifierP\">identifierP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>","name":"identifierP","module":"Parser.Lexer","link":"Parser-Lexer.html#v:identifierP"},{"display_html":"<a href=\"#v:keyword\">keyword</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"keyword","module":"Parser.Lexer","link":"Parser-Lexer.html#v:keyword"},{"display_html":"<a href=\"#v:identifierChar\">identifierChar</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Char.html#t:Char\" title=\"Data.Char\">Char</a>","name":"identifierChar","module":"Parser.Lexer","link":"Parser-Lexer.html#v:identifierChar"},{"display_html":"<a href=\"#v:kwLet\">kwLet</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwLet","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwLet"},{"display_html":"<a href=\"#v:kwRec\">kwRec</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwRec","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwRec"},{"display_html":"<a href=\"#v:kwIn\">kwIn</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwIn","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwIn"},{"display_html":"<a href=\"#v:kwIf\">kwIf</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwIf","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwIf"},{"display_html":"<a href=\"#v:kwThen\">kwThen</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwThen","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwThen"},{"display_html":"<a href=\"#v:kwElse\">kwElse</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwElse","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwElse"},{"display_html":"<a href=\"#v:kwFun\">kwFun</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwFun","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwFun"},{"display_html":"<a href=\"#v:kwTrue\">kwTrue</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwTrue","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwTrue"},{"display_html":"<a href=\"#v:kwFalse\">kwFalse</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwFalse","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwFalse"},{"display_html":"<a href=\"#v:kwUnit\">kwUnit</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwUnit","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwUnit"},{"display_html":"<a href=\"#v:kwBool\">kwBool</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwBool","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwBool"},{"display_html":"<a href=\"#v:kwInt\">kwInt</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"kwInt","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwInt"},{"display_html":"<a href=\"#v:choice-39-\">choice'</a> :: (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Foldable.html#t:Foldable\" title=\"Data.Foldable\">Foldable</a> f, <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Functor.html#t:Functor\" title=\"Data.Functor\">Functor</a> f) =&gt; f (<a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a) -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"choice'","module":"Parser.Utils","link":"Parser-Utils.html#v:choice-39-"},{"display_html":"<a href=\"#v:optional-39-\">optional'</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> a)","name":"optional'","module":"Parser.Utils","link":"Parser-Utils.html#v:optional-39-"},{"display_html":"<a href=\"#v:parens\">parens</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"parens","module":"Parser.Utils","link":"Parser-Utils.html#v:parens"},{"display_html":"<a href=\"#v:manyParens\">manyParens</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"manyParens","module":"Parser.Utils","link":"Parser-Utils.html#v:manyParens"},{"display_html":"<a href=\"#v:someParens\">someParens</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"someParens","module":"Parser.Utils","link":"Parser-Utils.html#v:someParens"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Program\">Program</a> = <a href=\"#v:Program\">Program</a> [<a href=\"Parser-Ast.html#t:Statement\" title=\"Parser.Ast\">Statement</a>]","name":"Program Program","module":"Parser.Ast","link":"Parser-Ast.html#t:Program"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Statement\">Statement</a><ul class=\"subs\"><li>= <a href=\"#v:StmtDecl\">StmtDecl</a> <a href=\"Parser-Ast.html#t:Declaration\" title=\"Parser.Ast\">Declaration</a></li><li>| <a href=\"#v:StmtExpr\">StmtExpr</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li></ul>","name":"Statement StmtExpr StmtDecl","module":"Parser.Ast","link":"Parser-Ast.html#t:Statement"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Declaration\">Declaration</a><ul class=\"subs\"><li>= <a href=\"#v:DeclVar\">DeclVar</a> (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>) <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:DeclFun\">DeclFun</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> <a href=\"Trees-Common.html#t:IsRec\" title=\"Trees.Common\">IsRec</a> <a href=\"Parser-Ast.html#t:Fun\" title=\"Parser.Ast\">Fun</a></li></ul>","name":"Declaration DeclFun DeclVar","module":"Parser.Ast","link":"Parser-Ast.html#t:Declaration"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Expression\">Expression</a><ul class=\"subs\"><li>= <a href=\"#v:ExprId\">ExprId</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a></li><li>| <a href=\"#v:ExprPrimVal\">ExprPrimVal</a> <a href=\"Trees-Common.html#t:PrimitiveValue\" title=\"Trees.Common\">PrimitiveValue</a></li><li>| <a href=\"#v:ExprBinOp\">ExprBinOp</a> <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprUnOp\">ExprUnOp</a> <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprApp\">ExprApp</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprIte\">ExprIte</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprLetIn\">ExprLetIn</a> <a href=\"Parser-Ast.html#t:Declaration\" title=\"Parser.Ast\">Declaration</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprFun\">ExprFun</a> <a href=\"Parser-Ast.html#t:Fun\" title=\"Parser.Ast\">Fun</a></li></ul>","name":"Expression ExprFun ExprLetIn ExprIte ExprApp ExprUnOp ExprBinOp ExprPrimVal ExprId","module":"Parser.Ast","link":"Parser-Ast.html#t:Expression"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Fun\">Fun</a> = <a href=\"#v:Fun\">Fun</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>)) (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>) <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"Fun Fun","module":"Parser.Ast","link":"Parser-Ast.html#t:Fun"},{"display_html":"<a href=\"#v:simplifyAst\">simplifyAst</a> :: <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a>","name":"simplifyAst","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:simplifyAst"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:SimplifierState\">SimplifierState</a> = <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html#t:State\" title=\"Control.Monad.State.Lazy\">State</a> <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a>","name":"SimplifierState","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#t:SimplifierState"},{"display_html":"<a href=\"#v:simplifyStmt\">simplifyStmt</a> :: <a href=\"Parser-Ast.html#t:Statement\" title=\"Parser.Ast\">Statement</a> -&gt; <a href=\"Transformations-Simplifier-Simplifier.html#t:SimplifierState\" title=\"Transformations.Simplifier.Simplifier\">SimplifierState</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a>","name":"simplifyStmt","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:simplifyStmt"},{"display_html":"<a href=\"#v:simplifyDecl\">simplifyDecl</a> :: <a href=\"Parser-Ast.html#t:Declaration\" title=\"Parser.Ast\">Declaration</a> -&gt; <a href=\"Transformations-Simplifier-Simplifier.html#t:SimplifierState\" title=\"Transformations.Simplifier.Simplifier\">SimplifierState</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a>","name":"simplifyDecl","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:simplifyDecl"},{"display_html":"<a href=\"#v:simplifyExpr\">simplifyExpr</a> :: <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-Simplifier.html#t:SimplifierState\" title=\"Transformations.Simplifier.Simplifier\">SimplifierState</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a>","name":"simplifyExpr","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:simplifyExpr"},{"display_html":"<a href=\"#v:simplifyFun\">simplifyFun</a> :: <a href=\"Parser-Ast.html#t:Fun\" title=\"Parser.Ast\">Fun</a> -&gt; <a href=\"Transformations-Simplifier-Simplifier.html#t:SimplifierState\" title=\"Transformations.Simplifier.Simplifier\">SimplifierState</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Fun\" title=\"Transformations.Simplifier.SimplifiedAst\">Fun</a>","name":"simplifyFun","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:simplifyFun"},{"display_html":"<a href=\"#v:convertId\">convertId</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"convertId","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:convertId"},{"display_html":"<a href=\"#v:convertTypedId\">convertTypedId</a> :: (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>) -&gt; <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"convertTypedId","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:convertTypedId"},{"display_html":"<a href=\"#v:genId\">genId</a> :: <a href=\"Transformations-Simplifier-Simplifier.html#t:SimplifierState\" title=\"Transformations.Simplifier.Simplifier\">SimplifierState</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"genId","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:genId"},{"display_html":"<a href=\"#v:simplify1\">simplify1</a> :: (<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; a) -&gt; <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-Simplifier.html#t:SimplifierState\" title=\"Transformations.Simplifier.Simplifier\">SimplifierState</a> a","name":"simplify1","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:simplify1"},{"display_html":"<a href=\"#v:simplify2\">simplify2</a> :: (<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; a) -&gt; <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-Simplifier.html#t:SimplifierState\" title=\"Transformations.Simplifier.Simplifier\">SimplifierState</a> a","name":"simplify2","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:simplify2"},{"display_html":"<a href=\"#v:simplify3\">simplify3</a> :: (<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> -&gt; a) -&gt; <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"Transformations-Simplifier-Simplifier.html#t:SimplifierState\" title=\"Transformations.Simplifier.Simplifier\">SimplifierState</a> a","name":"simplify3","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:simplify3"},{"display_html":"<a href=\"#v:parseProgram\">parseProgram</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a>","name":"parseProgram","module":"Parser.Parser","link":"Parser-Parser.html#v:parseProgram"},{"display_html":"<a href=\"#v:programP\">programP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a>","name":"programP","module":"Parser.Parser","link":"Parser-Parser.html#v:programP"},{"display_html":"<a href=\"#v:stmtP\">stmtP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Statement\" title=\"Parser.Ast\">Statement</a>","name":"stmtP","module":"Parser.Parser","link":"Parser-Parser.html#v:stmtP"},{"display_html":"<a href=\"#v:declP\">declP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Declaration\" title=\"Parser.Ast\">Declaration</a>","name":"declP","module":"Parser.Parser","link":"Parser-Parser.html#v:declP"},{"display_html":"<a href=\"#v:exprP\">exprP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"exprP","module":"Parser.Parser","link":"Parser-Parser.html#v:exprP"},{"display_html":"<a href=\"#v:exprTerm\">exprTerm</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"exprTerm","module":"Parser.Parser","link":"Parser-Parser.html#v:exprTerm"},{"display_html":"<a href=\"#v:opsTable\">opsTable</a> :: [[<a href=\"https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/Control-Monad-Combinators-Expr.html#t:Operator\" title=\"Control.Monad.Combinators.Expr\">Operator</a> <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>]]","name":"opsTable","module":"Parser.Parser","link":"Parser-Parser.html#v:opsTable"},{"display_html":"<a href=\"#v:appOp\">appOp</a> :: <a href=\"https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/Control-Monad-Combinators-Expr.html#t:Operator\" title=\"Control.Monad.Combinators.Expr\">Operator</a> <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"appOp","module":"Parser.Parser","link":"Parser-Parser.html#v:appOp"},{"display_html":"<a href=\"#v:binLeftOp\">binLeftOp</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> -&gt; <a href=\"https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/Control-Monad-Combinators-Expr.html#t:Operator\" title=\"Control.Monad.Combinators.Expr\">Operator</a> <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"binLeftOp","module":"Parser.Parser","link":"Parser-Parser.html#v:binLeftOp"},{"display_html":"<a href=\"#v:boolOp\">boolOp</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"Trees-Common.html#t:BooleanOperator\" title=\"Trees.Common\">BooleanOperator</a> -&gt; <a href=\"https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/Control-Monad-Combinators-Expr.html#t:Operator\" title=\"Control.Monad.Combinators.Expr\">Operator</a> <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"boolOp","module":"Parser.Parser","link":"Parser-Parser.html#v:boolOp"},{"display_html":"<a href=\"#v:arithOp\">arithOp</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"Trees-Common.html#t:ArithmeticOperator\" title=\"Trees.Common\">ArithmeticOperator</a> -&gt; <a href=\"https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/Control-Monad-Combinators-Expr.html#t:Operator\" title=\"Control.Monad.Combinators.Expr\">Operator</a> <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"arithOp","module":"Parser.Parser","link":"Parser-Parser.html#v:arithOp"},{"display_html":"<a href=\"#v:compOp\">compOp</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"Trees-Common.html#t:ComparisonOperator\" title=\"Trees.Common\">ComparisonOperator</a> -&gt; <a href=\"https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/Control-Monad-Combinators-Expr.html#t:Operator\" title=\"Control.Monad.Combinators.Expr\">Operator</a> <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"compOp","module":"Parser.Parser","link":"Parser-Parser.html#v:compOp"},{"display_html":"<a href=\"#v:unOp\">unOp</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> -&gt; <a href=\"https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/Control-Monad-Combinators-Expr.html#t:Operator\" title=\"Control.Monad.Combinators.Expr\">Operator</a> <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"unOp","module":"Parser.Parser","link":"Parser-Parser.html#v:unOp"},{"display_html":"<a href=\"#v:typeP\">typeP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>","name":"typeP","module":"Parser.Parser","link":"Parser-Parser.html#v:typeP"},{"display_html":"<a href=\"#v:primValExprP\">primValExprP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Trees-Common.html#t:PrimitiveValue\" title=\"Trees.Common\">PrimitiveValue</a>","name":"primValExprP","module":"Parser.Parser","link":"Parser-Parser.html#v:primValExprP"},{"display_html":"<a href=\"#v:funP\">funP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Parser-Ast.html#t:Fun\" title=\"Parser.Ast\">Fun</a>","name":"funP","module":"Parser.Parser","link":"Parser-Parser.html#v:funP"},{"display_html":"<a href=\"#v:parameterP\">parameterP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>)","name":"parameterP","module":"Parser.Parser","link":"Parser-Parser.html#v:parameterP"},{"display_html":"<a href=\"#v:optionalTypeAnnotationP\">optionalTypeAnnotationP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>)","name":"optionalTypeAnnotationP","module":"Parser.Parser","link":"Parser-Parser.html#v:optionalTypeAnnotationP"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:HType\">HType</a> a<ul class=\"subs\"><li>= <a href=\"#v:TyVarF\">TyVarF</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a></li><li>| <a href=\"#v:TyUnitF\">TyUnitF</a></li><li>| <a href=\"#v:TyBoolF\">TyBoolF</a></li><li>| <a href=\"#v:TyIntF\">TyIntF</a></li><li>| <a href=\"#v:TyFunF\">TyFunF</a> a a</li></ul>","name":"HType TyFunF TyIntF TyBoolF TyUnitF TyVarF","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:HType"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:TypeF\">TypeF</a> = <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2/docs/Data-Functor-Fixedpoint.html#t:Fix\" title=\"Data.Functor.Fixedpoint\">Fix</a> <a href=\"TypeChecker-HindleyMilner.html#t:HType\" title=\"TypeChecker.HindleyMilner\">HType</a>","name":"TypeF","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:TypeF"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:UType\">UType</a> = <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2/docs/Control-Unification-Types.html#t:UTerm\" title=\"Control.Unification.Types\">UTerm</a> <a href=\"TypeChecker-HindleyMilner.html#t:HType\" title=\"TypeChecker.HindleyMilner\">HType</a> <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2/docs/Control-Unification-IntVar.html#t:IntVar\" title=\"Control.Unification.IntVar\">IntVar</a>","name":"UType","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:UType"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Poly\">Poly</a> t = <a href=\"#v:Forall\">Forall</a> [<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>] t","name":"Poly Forall","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:Poly"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Polytype\">Polytype</a> = <a href=\"TypeChecker-HindleyMilner.html#t:Poly\" title=\"TypeChecker.HindleyMilner\">Poly</a> <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a>","name":"Polytype","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:Polytype"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:UPolytype\">UPolytype</a> = <a href=\"TypeChecker-HindleyMilner.html#t:Poly\" title=\"TypeChecker.HindleyMilner\">Poly</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"UPolytype","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:UPolytype"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:TyVar\">TyVar</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a>","name":"TyVar","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:TyVar"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:TyUnit\">TyUnit</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a>","name":"TyUnit","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:TyUnit"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:TyBool\">TyBool</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a>","name":"TyBool","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:TyBool"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:TyInt\">TyInt</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a>","name":"TyInt","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:TyInt"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:TyFun\">TyFun</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a>","name":"TyFun","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:TyFun"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:UTyVar\">UTyVar</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"UTyVar","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:UTyVar"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:UTyUnit\">UTyUnit</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"UTyUnit","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:UTyUnit"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:UTyBool\">UTyBool</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"UTyBool","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:UTyBool"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:UTyInt\">UTyInt</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"UTyInt","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:UTyInt"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:UTyFun\">UTyFun</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"UTyFun","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:UTyFun"},{"display_html":"<a href=\"#v:toTypeF\">toTypeF</a> :: <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a>","name":"toTypeF","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:toTypeF"},{"display_html":"<a href=\"#v:fromTypeToUType\">fromTypeToUType</a> :: <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"fromTypeToUType","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:fromTypeToUType"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Infer\">Infer</a> = <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Reader.html#t:ReaderT\" title=\"Control.Monad.Reader\">ReaderT</a> <a href=\"TypeChecker-HindleyMilner.html#t:Ctx\" title=\"TypeChecker.HindleyMilner\">Ctx</a> (<a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Except.html#t:ExceptT\" title=\"Control.Monad.Except\">ExceptT</a> <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a> (<a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2/docs/Control-Unification-IntVar.html#t:IntBindingT\" title=\"Control.Unification.IntVar\">IntBindingT</a> <a href=\"TypeChecker-HindleyMilner.html#t:HType\" title=\"TypeChecker.HindleyMilner\">HType</a> <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Functor-Identity.html#t:Identity\" title=\"Data.Functor.Identity\">Identity</a>))","name":"Infer","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:Infer"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Ctx\">Ctx</a> = <a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Map-Internal.html#t:Map\" title=\"Data.Map.Internal\">Map</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> <a href=\"TypeChecker-HindleyMilner.html#t:UPolytype\" title=\"TypeChecker.HindleyMilner\">UPolytype</a>","name":"Ctx","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:Ctx"},{"display_html":"<a href=\"#v:lookup\">lookup</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:LookUpType\" title=\"TypeChecker.HindleyMilner\">LookUpType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"lookup","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:lookup"},{"display_html":"<a href=\"#v:withBinding\">withBinding</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Reader-Class.html#t:MonadReader\" title=\"Control.Monad.Reader.Class\">MonadReader</a> <a href=\"TypeChecker-HindleyMilner.html#t:Ctx\" title=\"TypeChecker.HindleyMilner\">Ctx</a> m =&gt; <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UPolytype\" title=\"TypeChecker.HindleyMilner\">UPolytype</a> -&gt; m a -&gt; m a","name":"withBinding","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:withBinding"},{"display_html":"<a href=\"#v:ucata\">ucata</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Functor.html#t:Functor\" title=\"Data.Functor\">Functor</a> t =&gt; (v -&gt; a) -&gt; (t a -&gt; a) -&gt; <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2/docs/Control-Unification-Types.html#t:UTerm\" title=\"Control.Unification.Types\">UTerm</a> t v -&gt; a","name":"ucata","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:ucata"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:FreeVars\">FreeVars</a> a <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:freeVars\">freeVars</a> :: a -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> (<a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Set-Internal.html#t:Set\" title=\"Data.Set.Internal\">Set</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2/docs/Control-Unification-IntVar.html#t:IntVar\" title=\"Control.Unification.IntVar\">IntVar</a>))</li></ul>","name":"FreeVars freeVars","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:FreeVars"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:LookUpType\">LookUpType</a> = <a href=\"#v:Var\">Var</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>","name":"LookUpType Var","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:LookUpType"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TypeError\">TypeError</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Unreachable\">Unreachable</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:UnboundVar\">UnboundVar</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:Infinite\">Infinite</a> :: <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2/docs/Control-Unification-IntVar.html#t:IntVar\" title=\"Control.Unification.IntVar\">IntVar</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:ImpossibleBinOpApplication\">ImpossibleBinOpApplication</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:ImpossibleUnOpApplication\">ImpossibleUnOpApplication</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:Mismatch\">Mismatch</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:HType\" title=\"TypeChecker.HindleyMilner\">HType</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:HType\" title=\"TypeChecker.HindleyMilner\">HType</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li></ul>","name":"TypeError Mismatch ImpossibleUnOpApplication ImpossibleBinOpApplication Infinite UnboundVar Unreachable","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:TypeError"},{"display_html":"<a href=\"#v:fresh\">fresh</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"fresh","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:fresh"},{"display_html":"<a href=\"#v:-61-:-61-\">(=:=)</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"=:=","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:-61-:-61-"},{"display_html":"<a href=\"#v:applyBindings\">applyBindings</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"applyBindings","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:applyBindings"},{"display_html":"<a href=\"#v:instantiate\">instantiate</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UPolytype\" title=\"TypeChecker.HindleyMilner\">UPolytype</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"instantiate","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:instantiate"},{"display_html":"<a href=\"#v:substU\">substU</a> :: <a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Map-Internal.html#t:Map\" title=\"Data.Map.Internal\">Map</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2/docs/Control-Unification-IntVar.html#t:IntVar\" title=\"Control.Unification.IntVar\">IntVar</a>) <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"substU","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:substU"},{"display_html":"<a href=\"#v:skolemize\">skolemize</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UPolytype\" title=\"TypeChecker.HindleyMilner\">UPolytype</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"skolemize","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:skolemize"},{"display_html":"<a href=\"#v:mkVarName\">mkVarName</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2/docs/Control-Unification-IntVar.html#t:IntVar\" title=\"Control.Unification.IntVar\">IntVar</a> -&gt; <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>","name":"mkVarName","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:mkVarName"},{"display_html":"<a href=\"#v:generalize\">generalize</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UPolytype\" title=\"TypeChecker.HindleyMilner\">UPolytype</a>","name":"generalize","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:generalize"},{"display_html":"<a href=\"#v:toUPolytype\">toUPolytype</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:Polytype\" title=\"TypeChecker.HindleyMilner\">Polytype</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UPolytype\" title=\"TypeChecker.HindleyMilner\">UPolytype</a>","name":"toUPolytype","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:toUPolytype"},{"display_html":"<a href=\"#v:fromUPolytype\">fromUPolytype</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UPolytype\" title=\"TypeChecker.HindleyMilner\">UPolytype</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Polytype\" title=\"TypeChecker.HindleyMilner\">Polytype</a>","name":"fromUPolytype","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:fromUPolytype"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"#t:Pretty\">Pretty</a> p <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:pretty\">pretty</a> :: p -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a></li><li><a href=\"#v:prettyPrec\">prettyPrec</a> :: <a href=\"TypeChecker-PrettyPrinter.html#t:Prec\" title=\"TypeChecker.PrettyPrinter\">Prec</a> -&gt; p -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a></li></ul>","name":"Pretty prettyPrec pretty","module":"TypeChecker.PrettyPrinter","link":"TypeChecker-PrettyPrinter.html#t:Pretty"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Prec\">Prec</a> = <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a>","name":"Prec","module":"TypeChecker.PrettyPrinter","link":"TypeChecker-PrettyPrinter.html#t:Prec"},{"display_html":"<a href=\"#v:mparens\">mparens</a> :: <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"mparens","module":"TypeChecker.PrettyPrinter","link":"TypeChecker-PrettyPrinter.html#v:mparens"},{"display_html":"<a href=\"#v:checkProgram\">checkProgram</a> :: <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a> ()","name":"checkProgram","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:checkProgram"},{"display_html":"<a href=\"#v:inferProgram\">inferProgram</a> :: <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a> <a href=\"TypeChecker-HindleyMilner.html#t:Polytype\" title=\"TypeChecker.HindleyMilner\">Polytype</a>","name":"inferProgram","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:inferProgram"},{"display_html":"<a href=\"#v:inferStatements\">inferStatements</a> :: [<a href=\"Parser-Ast.html#t:Statement\" title=\"Parser.Ast\">Statement</a>] -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"inferStatements","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:inferStatements"},{"display_html":"<a href=\"#v:inferStatements-39-\">inferStatements'</a> :: [<a href=\"Parser-Ast.html#t:Statement\" title=\"Parser.Ast\">Statement</a>] -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"inferStatements'","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:inferStatements-39-"},{"display_html":"<a href=\"#v:inferExpr\">inferExpr</a> :: <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"inferExpr","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:inferExpr"},{"display_html":"<a href=\"#v:inferLetIn\">inferLetIn</a> :: <a href=\"Parser-Ast.html#t:Declaration\" title=\"Parser.Ast\">Declaration</a> -&gt; <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"inferLetIn","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:inferLetIn"},{"display_html":"<a href=\"#v:inferFun\">inferFun</a> :: <a href=\"Parser-Ast.html#t:Fun\" title=\"Parser.Ast\">Fun</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"inferFun","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:inferFun"},{"display_html":"<a href=\"#v:check\">check</a> :: <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"check","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:check"},{"display_html":"<a href=\"#v:withError\">withError</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> e m =&gt; (e -&gt; e) -&gt; m a -&gt; m a","name":"withError","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:withError"},{"display_html":"<a href=\"#v:tryError\">tryError</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Error-Class.html#t:MonadError\" title=\"Control.Monad.Error.Class\">MonadError</a> e m =&gt; m a -&gt; m (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> e a)","name":"tryError","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:tryError"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Module\">Module</a> = <a href=\"#v:Module\">Module</a> {<ul class=\"subs\"><li><a href=\"#v:name\">name</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a></li><li><a href=\"#v:code\">code</a> :: <a href=\"Transformations-Anf-Anf.html#t:Program\" title=\"Transformations.Anf.Anf\">Program</a></li></ul>}","name":"Module Module code name","module":"CodeGen.Module","link":"CodeGen-Module.html#t:Module"},{"display_html":"<a href=\"#v:compileToModule\">compileToModule</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Except.html#t:Except\" title=\"Control.Monad.Except\">Except</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> <a href=\"CodeGen-Module.html#t:Module\" title=\"CodeGen.Module\">Module</a>","name":"compileToModule","module":"CodeGen.Module","link":"CodeGen-Module.html#v:compileToModule"},{"display_html":"<a href=\"#v:parseAndVerify\">parseAndVerify</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Except.html#t:Except\" title=\"Control.Monad.Except\">Except</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a>","name":"parseAndVerify","module":"CodeGen.Module","link":"CodeGen-Module.html#v:parseAndVerify"},{"display_html":"<a href=\"#v:genLlvmIrModule\">genLlvmIrModule</a> :: <a href=\"CodeGen-Module.html#t:Module\" title=\"CodeGen.Module\">Module</a> -&gt; <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST.html#t:Module\" title=\"LLVM.AST\">Module</a>","name":"genLlvmIrModule","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:genLlvmIrModule"},{"display_html":"<a href=\"#v:ppLlvmModule\">ppLlvmModule</a> :: <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST.html#t:Module\" title=\"LLVM.AST\">Module</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"ppLlvmModule","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:ppLlvmModule"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:CodeGenM\">CodeGenM</a> = <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-IRBuilder-Monad.html#t:IRBuilderT\" title=\"LLVM.IRBuilder.Monad\">IRBuilderT</a> <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:Llvm\" title=\"CodeGen.Llvm.LlvmIrGen\">Llvm</a>","name":"CodeGenM","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Llvm\">Llvm</a> = <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-IRBuilder-Module.html#t:ModuleBuilderT\" title=\"LLVM.IRBuilder.Module\">ModuleBuilderT</a> (<a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html#t:State\" title=\"Control.Monad.State.Lazy\">State</a> <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:Env\" title=\"CodeGen.Llvm.LlvmIrGen\">Env</a>)","name":"Llvm","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#t:Llvm"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Env\">Env</a> = <a href=\"#v:Env\">Env</a> {<ul class=\"subs\"><li><a href=\"#v:locVars\">locVars</a> :: <a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Map-Internal.html#t:Map\" title=\"Data.Map.Internal\">Map</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a></li><li><a href=\"#v:globVars\">globVars</a> :: <a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Map-Internal.html#t:Map\" title=\"Data.Map.Internal\">Map</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a></li><li><a href=\"#v:funs\">funs</a> :: <a href=\"https://hackage.haskell.org/package/containers-0.6.8/docs/Data-Map-Internal.html#t:Map\" title=\"Data.Map.Internal\">Map</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> (<a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>, <a href=\"Trees-Common.html#t:Arity\" title=\"Trees.Common\">Arity</a>)</li></ul>}","name":"Env Env funs globVars locVars","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#t:Env"},{"display_html":"<a href=\"#v:genModule\">genModule</a> :: <a href=\"CodeGen-Module.html#t:Module\" title=\"CodeGen.Module\">Module</a> -&gt; <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST.html#t:Module\" title=\"LLVM.AST\">Module</a>","name":"genModule","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:genModule"},{"display_html":"<a href=\"#v:genStdLibDecl\">genStdLibDecl</a> :: <a href=\"StdLib.html#t:DeclarationWithArity\" title=\"StdLib\">DeclarationWithArity</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:Llvm\" title=\"CodeGen.Llvm.LlvmIrGen\">Llvm</a> ()","name":"genStdLibDecl","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:genStdLibDecl"},{"display_html":"<a href=\"#v:genGlobDecl\">genGlobDecl</a> :: <a href=\"Transformations-Anf-Anf.html#t:GlobalDeclaration\" title=\"Transformations.Anf.Anf\">GlobalDeclaration</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:Llvm\" title=\"CodeGen.Llvm.LlvmIrGen\">Llvm</a> ()","name":"genGlobDecl","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:genGlobDecl"},{"display_html":"<a href=\"#v:genId\">genId</a> :: <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"genId","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:genId"},{"display_html":"<a href=\"#v:genExpr\">genExpr</a> :: <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"genExpr","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:genExpr"},{"display_html":"<a href=\"#v:genAtom\">genAtom</a> :: <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"genAtom","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:genAtom"},{"display_html":"<a href=\"#v:genComp\">genComp</a> :: <a href=\"Transformations-Anf-Anf.html#t:ComplexExpression\" title=\"Transformations.Anf.Anf\">ComplexExpression</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"genComp","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:genComp"},{"display_html":"<a href=\"#v:findAny\">findAny</a> :: <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"findAny","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:findAny"},{"display_html":"<a href=\"#v:findGlobVar\">findGlobVar</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:Env\" title=\"CodeGen.Llvm.LlvmIrGen\">Env</a> m =&gt; <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; m <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"findGlobVar","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:findGlobVar"},{"display_html":"<a href=\"#v:findFun\">findFun</a> :: <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"findFun","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:findFun"},{"display_html":"<a href=\"#v:regLocVar\">regLocVar</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:Env\" title=\"CodeGen.Llvm.LlvmIrGen\">Env</a> m =&gt; <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a> -&gt; m ()","name":"regLocVar","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:regLocVar"},{"display_html":"<a href=\"#v:regGlobVar\">regGlobVar</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:Env\" title=\"CodeGen.Llvm.LlvmIrGen\">Env</a> m =&gt; <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a> -&gt; m ()","name":"regGlobVar","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:regGlobVar"},{"display_html":"<a href=\"#v:regFun\">regFun</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:Env\" title=\"CodeGen.Llvm.LlvmIrGen\">Env</a> m =&gt; <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> -&gt; <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a> -&gt; <a href=\"Trees-Common.html#t:Arity\" title=\"Trees.Common\">Arity</a> -&gt; m ()","name":"regFun","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:regFun"},{"display_html":"<a href=\"#v:allocate-39-\">allocate'</a> :: <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"allocate'","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:allocate-39-"},{"display_html":"<a href=\"#v:load-39-\">load'</a> :: <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"load'","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:load-39-"},{"display_html":"<a href=\"#v:store-39-\">store'</a> :: <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a> -&gt; <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> ()","name":"store'","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:store-39-"},{"display_html":"<a href=\"#v:boolToInt\">boolToInt</a> :: <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"boolToInt","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:boolToInt"},{"display_html":"<a href=\"#v:intToBool\">intToBool</a> :: <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a> -&gt; <a href=\"CodeGen-Llvm-LlvmIrGen.html#t:CodeGenM\" title=\"CodeGen.Llvm.LlvmIrGen\">CodeGenM</a> <a href=\"https://hackage.haskell.org/package/llvm-hs-pure-9.0.0/docs/LLVM-AST-Operand.html#t:Operand\" title=\"LLVM.AST.Operand\">Operand</a>","name":"intToBool","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:intToBool"},{"display_html":"<a href=\"#v:run\">run</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> <a href=\"CodeGen-RunResult.html#t:RunResult\" title=\"CodeGen.RunResult\">RunResult</a>","name":"run","module":"CodeGen.Llvm.Runner","link":"CodeGen-Llvm-Runner.html#v:run"},{"display_html":"<a href=\"#v:compileToBinary\">compileToBinary</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/System-IO.html#t:FilePath\" title=\"System.IO\">FilePath</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> (<a href=\"CodeGen-TimedValue.html#t:TimedValue\" title=\"CodeGen.TimedValue\">TimedValue</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> ()))","name":"compileToBinary","module":"CodeGen.Llvm.Runner","link":"CodeGen-Llvm-Runner.html#v:compileToBinary"},{"display_html":"<a href=\"#v:compileToLlvmIr\">compileToLlvmIr</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/System-IO.html#t:FilePath\" title=\"System.IO\">FilePath</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> (<a href=\"CodeGen-TimedValue.html#t:TimedValue\" title=\"CodeGen.TimedValue\">TimedValue</a> (<a href=\"https://hackage.haskell.org/package/base-4.14.3.0/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> ()))","name":"compileToLlvmIr","module":"CodeGen.Llvm.Runner","link":"CodeGen-Llvm-Runner.html#v:compileToLlvmIr"},{"display_html":"<a href=\"#v:compileToLlvmIr-39-\">compileToLlvmIr'</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Except.html#t:Except\" title=\"Control.Monad.Except\">Except</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text-Internal.html#t:Text\" title=\"Data.Text.Internal\">Text</a>","name":"compileToLlvmIr'","module":"CodeGen.Llvm.Runner","link":"CodeGen-Llvm-Runner.html#v:compileToLlvmIr-39-"}]