[{"display_html":"<a href=\"#v:ppCodeLines\">ppCodeLines</a> :: [<a href=\"CodeGen-RiscV-Lib-Types.html#t:CodeLine\" title=\"CodeGen.RiscV.Lib.Types\">CodeLine</a>] -&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"ppCodeLines","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#v:ppCodeLines"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:CodeLine\">CodeLine</a><ul class=\"subs\"><li>= <a href=\"#v:LabeledDirectiveCodeLine\">LabeledDirectiveCodeLine</a> <a href=\"CodeGen-RiscV-Lib-Types.html#t:Label\" title=\"CodeGen.RiscV.Lib.Types\">Label</a> <a href=\"CodeGen-RiscV-Lib-Types.html#t:Directive\" title=\"CodeGen.RiscV.Lib.Types\">Directive</a></li><li>| <a href=\"#v:LabelCodeLine\">LabelCodeLine</a> <a href=\"CodeGen-RiscV-Lib-Types.html#t:Label\" title=\"CodeGen.RiscV.Lib.Types\">Label</a></li><li>| <a href=\"#v:InstructionCodeLine\">InstructionCodeLine</a> <a href=\"CodeGen-RiscV-Lib-Types.html#t:Instruction\" title=\"CodeGen.RiscV.Lib.Types\">Instruction</a></li><li>| <a href=\"#v:DirectiveCodeLine\">DirectiveCodeLine</a> <a href=\"CodeGen-RiscV-Lib-Types.html#t:Directive\" title=\"CodeGen.RiscV.Lib.Types\">Directive</a></li></ul>","name":"CodeLine DirectiveCodeLine InstructionCodeLine LabelCodeLine LabeledDirectiveCodeLine","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#t:CodeLine"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Label\">Label</a> = <a href=\"#v:Label\">Label</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"Label Label","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#t:Label"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Instruction\">Instruction</a> = <a href=\"#v:Instruction\">Instruction</a> <a href=\"CodeGen-RiscV-Lib-Types.html#t:OpCode\" title=\"CodeGen.RiscV.Lib.Types\">OpCode</a> [<a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>]","name":"Instruction Instruction","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#t:Instruction"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Directive\">Directive</a><ul class=\"subs\"><li>= <a href=\"#v:DirText\">DirText</a></li><li>| <a href=\"#v:DirData\">DirData</a></li><li>| <a href=\"#v:DirDWord\">DirDWord</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a></li><li>| <a href=\"#v:DirGlobl\">DirGlobl</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li></ul>","name":"Directive DirGlobl DirDWord DirData DirText","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#t:Directive"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:OpCode\">OpCode</a><ul class=\"subs\"><li>= <a href=\"#v:And\">And</a></li><li>| <a href=\"#v:Or\">Or</a></li><li>| <a href=\"#v:Add\">Add</a></li><li>| <a href=\"#v:Sub\">Sub</a></li><li>| <a href=\"#v:Mul\">Mul</a></li><li>| <a href=\"#v:Neg\">Neg</a></li><li>| <a href=\"#v:Seqz\">Seqz</a></li><li>| <a href=\"#v:Snez\">Snez</a></li><li>| <a href=\"#v:Slt\">Slt</a></li><li>| <a href=\"#v:Sd\">Sd</a></li><li>| <a href=\"#v:Ld\">Ld</a></li><li>| <a href=\"#v:Li\">Li</a></li><li>| <a href=\"#v:La\">La</a></li><li>| <a href=\"#v:Addi\">Addi</a></li><li>| <a href=\"#v:Beqz\">Beqz</a></li><li>| <a href=\"#v:J\">J</a></li><li>| <a href=\"#v:Call\">Call</a></li><li>| <a href=\"#v:Ret\">Ret</a></li></ul>","name":"OpCode J Beqz Addi La Li Ld Sd Slt Snez Seqz Neg Ret Call Or Sub Mul Add And","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#t:OpCode"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Operand\">Operand</a><ul class=\"subs\"><li>= <a href=\"#v:Immediate\">Immediate</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a></li><li>| <a href=\"#v:Register\">Register</a> <a href=\"CodeGen-RiscV-Lib-Types.html#t:Register\" title=\"CodeGen.RiscV.Lib.Types\">Register</a></li><li>| <a href=\"#v:RegisterWithOffset\">RegisterWithOffset</a> <a href=\"CodeGen-RiscV-Lib-Types.html#t:Register\" title=\"CodeGen.RiscV.Lib.Types\">Register</a> <a href=\"CodeGen-RiscV-Lib-Types.html#t:Offset\" title=\"CodeGen.RiscV.Lib.Types\">Offset</a></li><li>| <a href=\"#v:Symbol\">Symbol</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li></ul>","name":"Operand RegisterWithOffset Register Immediate Symbol","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#t:Operand"},{"display_html":"<span class=\"keyword\">pattern</span> <a href=\"#v:Memory\">Memory</a> :: <a href=\"CodeGen-RiscV-Lib-Types.html#t:Offset\" title=\"CodeGen.RiscV.Lib.Types\">Offset</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"Memory","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#v:Memory"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Offset\">Offset</a> = <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a>","name":"Offset","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#t:Offset"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Register\">Register</a><ul class=\"subs\"><li>= <a href=\"#v:Zero\">Zero</a></li><li>| <a href=\"#v:Ra\">Ra</a></li><li>| <a href=\"#v:Sp\">Sp</a></li><li>| <a href=\"#v:Gp\">Gp</a></li><li>| <a href=\"#v:Tp\">Tp</a></li><li>| <a href=\"#v:T0\">T0</a></li><li>| <a href=\"#v:T1\">T1</a></li><li>| <a href=\"#v:T2\">T2</a></li><li>| <a href=\"#v:S0\">S0</a></li><li>| <a href=\"#v:S1\">S1</a></li><li>| <a href=\"#v:A0\">A0</a></li><li>| <a href=\"#v:A1\">A1</a></li><li>| <a href=\"#v:A2\">A2</a></li><li>| <a href=\"#v:A3\">A3</a></li><li>| <a href=\"#v:A4\">A4</a></li><li>| <a href=\"#v:A5\">A5</a></li><li>| <a href=\"#v:A6\">A6</a></li><li>| <a href=\"#v:A7\">A7</a></li><li>| <a href=\"#v:S2\">S2</a></li><li>| <a href=\"#v:S3\">S3</a></li><li>| <a href=\"#v:S4\">S4</a></li><li>| <a href=\"#v:S5\">S5</a></li><li>| <a href=\"#v:S6\">S6</a></li><li>| <a href=\"#v:S7\">S7</a></li><li>| <a href=\"#v:S8\">S8</a></li><li>| <a href=\"#v:S9\">S9</a></li><li>| <a href=\"#v:S10\">S10</a></li><li>| <a href=\"#v:S11\">S11</a></li><li>| <a href=\"#v:T3\">T3</a></li><li>| <a href=\"#v:T4\">T4</a></li><li>| <a href=\"#v:T5\">T5</a></li><li>| <a href=\"#v:T6\">T6</a></li></ul>","name":"Register T6 T5 T4 T3 S11 S10 S9 S8 S7 S6 S5 S4 S3 S2 A7 A6 A5 A4 A3 A2 A1 A0 S0 T2 T1 T0 Tp Gp Ra Sp Zero S1","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#t:Register"},{"display_html":"<a href=\"#v:dword\">dword</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a>","name":"dword","module":"CodeGen.RiscV.Lib.Types","link":"CodeGen-RiscV-Lib-Types.html#v:dword"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:AsmBuilderT\">AsmBuilderT</a> m a = <a href=\"#v:AsmBuilderT\">AsmBuilderT</a> {<ul class=\"subs\"><li><a href=\"#v:unAsmBuilderT\">unAsmBuilderT</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-State-Lazy.html#t:StateT\" title=\"Control.Monad.State.Lazy\">StateT</a> <a href=\"CodeGen-RiscV-Lib-Monad.html#t:BuilderState\" title=\"CodeGen.RiscV.Lib.Monad\">BuilderState</a> m a</li></ul>}","name":"AsmBuilderT unAsmBuilderT AsmBuilderT","module":"CodeGen.RiscV.Lib.Monad","link":"CodeGen-RiscV-Lib-Monad.html#t:AsmBuilderT"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:BuilderState\">BuilderState</a> = <a href=\"#v:BS\">BS</a> {<ul class=\"subs\"><li><a href=\"#v:programBS\">programBS</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:ProgramBuilderState\" title=\"CodeGen.RiscV.Lib.Monad\">ProgramBuilderState</a></li><li><a href=\"#v:functionBS\">functionBS</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:FunctionBuilderState\" title=\"CodeGen.RiscV.Lib.Monad\">FunctionBuilderState</a></li><li><a href=\"#v:idCnt\">idCnt</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a></li></ul>}","name":"BuilderState idCnt functionBS programBS BS","module":"CodeGen.RiscV.Lib.Monad","link":"CodeGen-RiscV-Lib-Monad.html#t:BuilderState"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ProgramBuilderState\">ProgramBuilderState</a> = <a href=\"#v:PBS\">PBS</a> {<ul class=\"subs\"><li><a href=\"#v:sectionText\">sectionText</a> :: [[<a href=\"CodeGen-RiscV-Lib-Types.html#t:CodeLine\" title=\"CodeGen.RiscV.Lib.Types\">CodeLine</a>]]</li><li><a href=\"#v:sectionData\">sectionData</a> :: [<a href=\"CodeGen-RiscV-Lib-Types.html#t:CodeLine\" title=\"CodeGen.RiscV.Lib.Types\">CodeLine</a>]</li></ul>}","name":"ProgramBuilderState sectionData sectionText PBS","module":"CodeGen.RiscV.Lib.Monad","link":"CodeGen-RiscV-Lib-Monad.html#t:ProgramBuilderState"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:FunctionBuilderState\">FunctionBuilderState</a> = <a href=\"#v:FBS\">FBS</a> {<ul class=\"subs\"><li><a href=\"#v:functionCodeLines\">functionCodeLines</a> :: [[<a href=\"CodeGen-RiscV-Lib-Types.html#t:CodeLine\" title=\"CodeGen.RiscV.Lib.Types\">CodeLine</a>]]</li><li><a href=\"#v:stackPointerOffset\">stackPointerOffset</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a></li></ul>}","name":"FunctionBuilderState stackPointerOffset functionCodeLines FBS","module":"CodeGen.RiscV.Lib.Monad","link":"CodeGen-RiscV-Lib-Monad.html#t:FunctionBuilderState"},{"display_html":"<a href=\"#v:emptyBS\">emptyBS</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:BuilderState\" title=\"CodeGen.RiscV.Lib.Monad\">BuilderState</a>","name":"emptyBS","module":"CodeGen.RiscV.Lib.Monad","link":"CodeGen-RiscV-Lib-Monad.html#v:emptyBS"},{"display_html":"<a href=\"#v:emptyPBS\">emptyPBS</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:ProgramBuilderState\" title=\"CodeGen.RiscV.Lib.Monad\">ProgramBuilderState</a>","name":"emptyPBS","module":"CodeGen.RiscV.Lib.Monad","link":"CodeGen-RiscV-Lib-Monad.html#v:emptyPBS"},{"display_html":"<a href=\"#v:emptyFBS\">emptyFBS</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:FunctionBuilderState\" title=\"CodeGen.RiscV.Lib.Monad\">FunctionBuilderState</a>","name":"emptyFBS","module":"CodeGen.RiscV.Lib.Monad","link":"CodeGen-RiscV-Lib-Monad.html#v:emptyFBS"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:AsmBuilder\">AsmBuilder</a> = <a href=\"CodeGen-RiscV-Lib-Monad.html#t:AsmBuilderT\" title=\"CodeGen.RiscV.Lib.Monad\">AsmBuilderT</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Functor-Identity.html#t:Identity\" title=\"Data.Functor.Identity\">Identity</a>","name":"AsmBuilder","module":"CodeGen.RiscV.Lib.Monad","link":"CodeGen-RiscV-Lib-Monad.html#t:AsmBuilder"},{"display_html":"<span class=\"keyword\">class</span> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"#t:MonadAsmBuilder\">MonadAsmBuilder</a> m <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:getAsmBuilderState\">getAsmBuilderState</a> :: m <a href=\"CodeGen-RiscV-Lib-Monad.html#t:BuilderState\" title=\"CodeGen.RiscV.Lib.Monad\">BuilderState</a></li><li><a href=\"#v:modifyAsmBuilderState\">modifyAsmBuilderState</a> :: (<a href=\"CodeGen-RiscV-Lib-Monad.html#t:BuilderState\" title=\"CodeGen.RiscV.Lib.Monad\">BuilderState</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Monad.html#t:BuilderState\" title=\"CodeGen.RiscV.Lib.Monad\">BuilderState</a>) -&gt; m ()</li></ul>","name":"MonadAsmBuilder modifyAsmBuilderState getAsmBuilderState","module":"CodeGen.RiscV.Lib.Monad","link":"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder"},{"display_html":"<a href=\"#v:compileT\">compileT</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Monad.html#t:AsmBuilderT\" title=\"CodeGen.RiscV.Lib.Monad\">AsmBuilderT</a> m a -&gt; m [<a href=\"CodeGen-RiscV-Lib-Types.html#t:CodeLine\" title=\"CodeGen.RiscV.Lib.Types\">CodeLine</a>]","name":"compileT","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:compileT"},{"display_html":"<a href=\"#v:compile\">compile</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:AsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">AsmBuilder</a> a -&gt; [<a href=\"CodeGen-RiscV-Lib-Types.html#t:CodeLine\" title=\"CodeGen.RiscV.Lib.Types\">CodeLine</a>]","name":"compile","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:compile"},{"display_html":"<a href=\"#v:mainFunction\">mainFunction</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; (() -&gt; m ()) -&gt; m ()","name":"mainFunction","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:mainFunction"},{"display_html":"<a href=\"#v:function\">function</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a> -&gt; ([<a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>] -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>) -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"function","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:function"},{"display_html":"<a href=\"#v:globalVar\">globalVar</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"globalVar","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:globalVar"},{"display_html":"<a href=\"#v:externFunction\">externFunction</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"externFunction","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:externFunction"},{"display_html":"<a href=\"#v:storeToLabeledAddr\">storeToLabeledAddr</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m ()","name":"storeToLabeledAddr","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:storeToLabeledAddr"},{"display_html":"<a href=\"#v:immediate\">immediate</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"immediate","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:immediate"},{"display_html":"<a href=\"#v:and\">and</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"and","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:and"},{"display_html":"<a href=\"#v:or\">or</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"or","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:or"},{"display_html":"<a href=\"#v:add\">add</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"add","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:add"},{"display_html":"<a href=\"#v:sub\">sub</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"sub","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:sub"},{"display_html":"<a href=\"#v:mul\">mul</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"mul","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:mul"},{"display_html":"<a href=\"#v:neg\">neg</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"neg","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:neg"},{"display_html":"<a href=\"#v:eq\">eq</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"eq","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:eq"},{"display_html":"<a href=\"#v:ne\">ne</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"ne","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:ne"},{"display_html":"<a href=\"#v:lt\">lt</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"lt","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:lt"},{"display_html":"<a href=\"#v:le\">le</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"le","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:le"},{"display_html":"<a href=\"#v:gt\">gt</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"gt","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:gt"},{"display_html":"<a href=\"#v:ge\">ge</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"ge","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:ge"},{"display_html":"<a href=\"#v:call\">call</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; [<a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>] -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"call","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:call"},{"display_html":"<a href=\"#v:ite\">ite</a> :: <a href=\"CodeGen-RiscV-Lib-Monad.html#t:MonadAsmBuilder\" title=\"CodeGen.RiscV.Lib.Monad\">MonadAsmBuilder</a> m =&gt; <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a> -&gt; (() -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>) -&gt; (() -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>) -&gt; m <a href=\"CodeGen-RiscV-Lib-Types.html#t:Operand\" title=\"CodeGen.RiscV.Lib.Types\">Operand</a>","name":"ite","module":"CodeGen.RiscV.Lib","link":"CodeGen-RiscV-Lib.html#v:ite"},{"display_html":"<a href=\"#v:printCRuntime\">printCRuntime</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:FilePath\" title=\"System.IO\">FilePath</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> ()","name":"printCRuntime","module":"CodeGen.Runtime.PrintRuntime","link":"CodeGen-Runtime-PrintRuntime.html#v:printCRuntime"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TimedValue\">TimedValue</a> a = <a href=\"#v:TimedValue\">TimedValue</a> {<ul class=\"subs\"><li><a href=\"#v:value\">value</a> :: a</li><li><a href=\"#v:time\">time</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li></ul>}","name":"TimedValue value time TimedValue","module":"CodeGen.TimedValue","link":"CodeGen-TimedValue.html#t:TimedValue"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Nanoseconds\">Nanoseconds</a> = <a href=\"#v:Nanoseconds\">Nanoseconds</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"Nanoseconds Nanoseconds","module":"CodeGen.TimedValue","link":"CodeGen-TimedValue.html#t:Nanoseconds"},{"display_html":"<a href=\"#v:measureTimedValue\">measureTimedValue</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> a -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> (<a href=\"CodeGen-TimedValue.html#t:TimedValue\" title=\"CodeGen.TimedValue\">TimedValue</a> a)","name":"measureTimedValue","module":"CodeGen.TimedValue","link":"CodeGen-TimedValue.html#v:measureTimedValue"},{"display_html":"<a href=\"#v:measureTime\">measureTime</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> () -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a>","name":"measureTime","module":"CodeGen.TimedValue","link":"CodeGen-TimedValue.html#v:measureTime"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:RunResult\">RunResult</a><ul class=\"subs\"><li>= <a href=\"#v:Success\">Success</a> { <ul class=\"subs\"><li><a href=\"#v:stdout\">stdout</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li><li><a href=\"#v:compTime\">compTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li><li><a href=\"#v:runTime\">runTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li></ul> }</li><li>| <a href=\"#v:CompilationError\">CompilationError</a> { <ul class=\"subs\"><li><a href=\"#v:compErrMsg\">compErrMsg</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li><li><a href=\"#v:compTime\">compTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li></ul> }</li><li>| <a href=\"#v:RuntimeError\">RuntimeError</a> { <ul class=\"subs\"><li><a href=\"#v:stdout\">stdout</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li><li><a href=\"#v:stderr\">stderr</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a></li><li><a href=\"#v:exitCode\">exitCode</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a></li><li><a href=\"#v:compTime\">compTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li><li><a href=\"#v:runTime\">runTime</a> :: <a href=\"CodeGen-TimedValue.html#t:Nanoseconds\" title=\"CodeGen.TimedValue\">Nanoseconds</a></li></ul> }</li></ul>","name":"RunResult exitCode compErrMsg runTime compTime stderr stdout RuntimeError CompilationError Success","module":"CodeGen.RunResult","link":"CodeGen-RunResult.html#t:RunResult"},{"display_html":"<a href=\"#v:liftM1-39-\">liftM1'</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; (a' -&gt; m a) -&gt; (a -&gt; b) -&gt; a' -&gt; m b","name":"liftM1'","module":"MonadUtils","link":"MonadUtils.html#v:liftM1-39-"},{"display_html":"<a href=\"#v:liftM2-39-\">liftM2'</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; (a' -&gt; m a) -&gt; (a -&gt; a -&gt; b) -&gt; a' -&gt; a' -&gt; m b","name":"liftM2'","module":"MonadUtils","link":"MonadUtils.html#v:liftM2-39-"},{"display_html":"<a href=\"#v:liftM3-39-\">liftM3'</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Control-Monad.html#t:Monad\" title=\"Control.Monad\">Monad</a> m =&gt; (a' -&gt; m a) -&gt; (a -&gt; a -&gt; a -&gt; b) -&gt; a' -&gt; a' -&gt; a' -&gt; m b","name":"liftM3'","module":"MonadUtils","link":"MonadUtils.html#v:liftM3-39-"},{"display_html":"<a href=\"#v:locally\">locally</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-State-Class.html#t:MonadState\" title=\"Control.Monad.State.Class\">MonadState</a> s m =&gt; m a -&gt; m a","name":"locally","module":"MonadUtils","link":"MonadUtils.html#v:locally"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Identifier\">Identifier</a> = <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"Identifier","module":"Trees.Common","link":"Trees-Common.html#t:Identifier"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Identifier-39-\">Identifier'</a><ul class=\"subs\"><li>= <a href=\"#v:Txt\">Txt</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a></li><li>| <a href=\"#v:Gen\">Gen</a> <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a></li></ul>","name":"Identifier' Gen Txt","module":"Trees.Common","link":"Trees-Common.html#t:Identifier-39-"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:IdCnt\">IdCnt</a> = <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Prelude.html#t:Integer\" title=\"Prelude\">Integer</a>","name":"IdCnt","module":"Trees.Common","link":"Trees-Common.html#t:IdCnt"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:BinaryOperator\">BinaryOperator</a><ul class=\"subs\"><li>= <a href=\"#v:BoolOp\">BoolOp</a> <a href=\"Trees-Common.html#t:BooleanOperator\" title=\"Trees.Common\">BooleanOperator</a></li><li>| <a href=\"#v:ArithOp\">ArithOp</a> <a href=\"Trees-Common.html#t:ArithmeticOperator\" title=\"Trees.Common\">ArithmeticOperator</a></li><li>| <a href=\"#v:CompOp\">CompOp</a> <a href=\"Trees-Common.html#t:ComparisonOperator\" title=\"Trees.Common\">ComparisonOperator</a></li></ul>","name":"BinaryOperator CompOp ArithOp BoolOp","module":"Trees.Common","link":"Trees-Common.html#t:BinaryOperator"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UnaryOperator\">UnaryOperator</a> = <a href=\"#v:UnMinusOp\">UnMinusOp</a>","name":"UnaryOperator UnMinusOp","module":"Trees.Common","link":"Trees-Common.html#t:UnaryOperator"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:BooleanOperator\">BooleanOperator</a><ul class=\"subs\"><li>= <a href=\"#v:AndOp\">AndOp</a></li><li>| <a href=\"#v:OrOp\">OrOp</a></li></ul>","name":"BooleanOperator OrOp AndOp","module":"Trees.Common","link":"Trees-Common.html#t:BooleanOperator"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ArithmeticOperator\">ArithmeticOperator</a><ul class=\"subs\"><li>= <a href=\"#v:PlusOp\">PlusOp</a></li><li>| <a href=\"#v:MinusOp\">MinusOp</a></li><li>| <a href=\"#v:MulOp\">MulOp</a></li><li>| <a href=\"#v:DivOp\">DivOp</a></li></ul>","name":"ArithmeticOperator DivOp MulOp MinusOp PlusOp","module":"Trees.Common","link":"Trees-Common.html#t:ArithmeticOperator"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ComparisonOperator\">ComparisonOperator</a><ul class=\"subs\"><li>= <a href=\"#v:EqOp\">EqOp</a></li><li>| <a href=\"#v:NeOp\">NeOp</a></li><li>| <a href=\"#v:LtOp\">LtOp</a></li><li>| <a href=\"#v:LeOp\">LeOp</a></li><li>| <a href=\"#v:GtOp\">GtOp</a></li><li>| <a href=\"#v:GeOp\">GeOp</a></li></ul>","name":"ComparisonOperator GeOp GtOp LeOp LtOp NeOp EqOp","module":"Trees.Common","link":"Trees-Common.html#t:ComparisonOperator"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:IsRec\">IsRec</a> = <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>","name":"IsRec","module":"Trees.Common","link":"Trees-Common.html#t:IsRec"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Type\">Type</a><ul class=\"subs\"><li>= <a href=\"#v:TUnit\">TUnit</a></li><li>| <a href=\"#v:TBool\">TBool</a></li><li>| <a href=\"#v:TInt\">TInt</a></li><li>| <a href=\"#v:TFun\">TFun</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a></li></ul>","name":"Type TFun TInt TBool TUnit","module":"Trees.Common","link":"Trees-Common.html#t:Type"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Arity\">Arity</a> = <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int\" title=\"Data.Int\">Int</a>","name":"Arity","module":"Trees.Common","link":"Trees-Common.html#t:Arity"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:PrimitiveValue\">PrimitiveValue</a><ul class=\"subs\"><li>= <a href=\"#v:PrimValUnit\">PrimValUnit</a></li><li>| <a href=\"#v:PrimValBool\">PrimValBool</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li><li>| <a href=\"#v:PrimValInt\">PrimValInt</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a></li></ul>","name":"PrimitiveValue PrimValInt PrimValBool PrimValUnit","module":"Trees.Common","link":"Trees-Common.html#t:PrimitiveValue"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Program\">Program</a> = <a href=\"#v:Program\">Program</a> [<a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a>] <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a>","name":"Program Program","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#t:Program"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Declaration\">Declaration</a><ul class=\"subs\"><li>= <a href=\"#v:DeclVar\">DeclVar</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:DeclFun\">DeclFun</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Trees-Common.html#t:IsRec\" title=\"Trees.Common\">IsRec</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Fun\" title=\"Transformations.Simplifier.SimplifiedAst\">Fun</a></li></ul>","name":"Declaration DeclFun DeclVar","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#t:Declaration"},{"display_html":"<a href=\"#v:declId\">declId</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a> -&gt; <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>","name":"declId","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#v:declId"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Expression\">Expression</a><ul class=\"subs\"><li>= <a href=\"#v:ExprId\">ExprId</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a></li><li>| <a href=\"#v:ExprPrimVal\">ExprPrimVal</a> <a href=\"Trees-Common.html#t:PrimitiveValue\" title=\"Trees.Common\">PrimitiveValue</a></li><li>| <a href=\"#v:ExprBinOp\">ExprBinOp</a> <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprUnOp\">ExprUnOp</a> <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprApp\">ExprApp</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprIte\">ExprIte</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprLetIn\">ExprLetIn</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Declaration\" title=\"Transformations.Simplifier.SimplifiedAst\">Declaration</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a></li><li>| <a href=\"#v:ExprFun\">ExprFun</a> <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Fun\" title=\"Transformations.Simplifier.SimplifiedAst\">Fun</a></li></ul>","name":"Expression ExprFun ExprLetIn ExprIte ExprApp ExprUnOp ExprBinOp ExprPrimVal ExprId","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#t:Expression"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Fun\">Fun</a> = <a href=\"#v:Fun\">Fun</a> (<a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>) <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Expression\" title=\"Transformations.Simplifier.SimplifiedAst\">Expression</a>","name":"Fun Fun","module":"Transformations.Simplifier.SimplifiedAst","link":"Transformations-Simplifier-SimplifiedAst.html#t:Fun"},{"display_html":"<a href=\"#v:relabelAst\">relabelAst</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a>","name":"relabelAst","module":"Transformations.Relabeler.Relabeler","link":"Transformations-Relabeler-Relabeler.html#v:relabelAst"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Program\">Program</a> = <a href=\"#v:Program\">Program</a> [<a href=\"Transformations-Ll-Lfr.html#t:GlobalDeclaration\" title=\"Transformations.Ll.Lfr\">GlobalDeclaration</a>] <a href=\"Trees-Common.html#t:IdCnt\" title=\"Trees.Common\">IdCnt</a>","name":"Program Program","module":"Transformations.Ll.Lfr","link":"Transformations-Ll-Lfr.html#t:Program"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:GlobalDeclaration\">GlobalDeclaration</a><ul class=\"subs\"><li>= <a href=\"#v:GlobVarDecl\">GlobVarDecl</a> <a href=\"Transformations-Ll-Lfr.html#t:VarDeclaration\" title=\"Transformations.Ll.Lfr\">VarDeclaration</a></li><li>| <a href=\"#v:GlobFunDecl\">GlobFunDecl</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> [<a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>] <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li></ul>","name":"GlobalDeclaration GlobFunDecl GlobVarDecl","module":"Transformations.Ll.Lfr","link":"Transformations-Ll-Lfr.html#t:GlobalDeclaration"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:VarDeclaration\">VarDeclaration</a> = <a href=\"#v:VarDecl\">VarDecl</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a>","name":"VarDeclaration VarDecl","module":"Transformations.Ll.Lfr","link":"Transformations-Ll-Lfr.html#t:VarDeclaration"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Expression\">Expression</a><ul class=\"subs\"><li>= <a href=\"#v:ExprId\">ExprId</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a></li><li>| <a href=\"#v:ExprPrimVal\">ExprPrimVal</a> <a href=\"Trees-Common.html#t:PrimitiveValue\" title=\"Trees.Common\">PrimitiveValue</a></li><li>| <a href=\"#v:ExprBinOp\">ExprBinOp</a> <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li><li>| <a href=\"#v:ExprUnOp\">ExprUnOp</a> <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li><li>| <a href=\"#v:ExprApp\">ExprApp</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li><li>| <a href=\"#v:ExprIte\">ExprIte</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li><li>| <a href=\"#v:ExprLetIn\">ExprLetIn</a> <a href=\"Transformations-Ll-Lfr.html#t:VarDeclaration\" title=\"Transformations.Ll.Lfr\">VarDeclaration</a> <a href=\"Transformations-Ll-Lfr.html#t:Expression\" title=\"Transformations.Ll.Lfr\">Expression</a></li></ul>","name":"Expression ExprLetIn ExprIte ExprApp ExprUnOp ExprBinOp ExprPrimVal ExprId","module":"Transformations.Ll.Lfr","link":"Transformations-Ll-Lfr.html#t:Expression"},{"display_html":"<a href=\"#v:llAst\">llAst</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a> -&gt; <a href=\"Transformations-Ll-Lfr.html#t:Program\" title=\"Transformations.Ll.Lfr\">Program</a>","name":"llAst","module":"Transformations.Ll.Ll","link":"Transformations-Ll-Ll.html#v:llAst"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Program\">Program</a> = <a href=\"#v:Program\">Program</a> [<a href=\"Transformations-Anf-Anf.html#t:GlobalDeclaration\" title=\"Transformations.Anf.Anf\">GlobalDeclaration</a>]","name":"Program Program","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:Program"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:GlobalDeclaration\">GlobalDeclaration</a><ul class=\"subs\"><li>= <a href=\"#v:GlobVarDecl\">GlobVarDecl</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a></li><li>| <a href=\"#v:GlobFunDecl\">GlobFunDecl</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> [<a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>] <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a></li></ul>","name":"GlobalDeclaration GlobFunDecl GlobVarDecl","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:GlobalDeclaration"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Expression\">Expression</a><ul class=\"subs\"><li>= <a href=\"#v:ExprAtom\">ExprAtom</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a></li><li>| <a href=\"#v:ExprComp\">ExprComp</a> <a href=\"Transformations-Anf-Anf.html#t:ComplexExpression\" title=\"Transformations.Anf.Anf\">ComplexExpression</a></li><li>| <a href=\"#v:ExprLetIn\">ExprLetIn</a> (<a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a>, <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a>) <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a></li></ul>","name":"Expression ExprComp ExprAtom ExprLetIn","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:Expression"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:AtomicExpression\">AtomicExpression</a><ul class=\"subs\"><li>= <a href=\"#v:AtomId\">AtomId</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a></li><li>| <a href=\"#v:AtomUnit\">AtomUnit</a></li><li>| <a href=\"#v:AtomBool\">AtomBool</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a></li><li>| <a href=\"#v:AtomInt\">AtomInt</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a></li></ul>","name":"AtomicExpression AtomInt AtomBool AtomUnit AtomId","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:AtomicExpression"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:ComplexExpression\">ComplexExpression</a><ul class=\"subs\"><li>= <a href=\"#v:CompApp\">CompApp</a> <a href=\"Trees-Common.html#t:Identifier-39-\" title=\"Trees.Common\">Identifier'</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a></li><li>| <a href=\"#v:CompIte\">CompIte</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a> <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a> <a href=\"Transformations-Anf-Anf.html#t:Expression\" title=\"Transformations.Anf.Anf\">Expression</a></li><li>| <a href=\"#v:CompBinOp\">CompBinOp</a> <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a></li><li>| <a href=\"#v:CompUnOp\">CompUnOp</a> <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> <a href=\"Transformations-Anf-Anf.html#t:AtomicExpression\" title=\"Transformations.Anf.Anf\">AtomicExpression</a></li></ul>","name":"ComplexExpression CompUnOp CompBinOp CompIte CompApp","module":"Transformations.Anf.Anf","link":"Transformations-Anf-Anf.html#t:ComplexExpression"},{"display_html":"<a href=\"#v:prettyPrint\">prettyPrint</a> :: <a href=\"Transformations-Anf-Anf.html#t:Program\" title=\"Transformations.Anf.Anf\">Program</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-String.html#t:String\" title=\"Data.String\">String</a>","name":"prettyPrint","module":"Transformations.Anf.PrettyPrinter","link":"Transformations-Anf-PrettyPrinter.html#v:prettyPrint"},{"display_html":"<a href=\"#v:genAnf\">genAnf</a> :: <a href=\"Transformations-Ll-Lfr.html#t:Program\" title=\"Transformations.Ll.Lfr\">Program</a> -&gt; <a href=\"Transformations-Anf-Anf.html#t:Program\" title=\"Transformations.Anf.Anf\">Program</a>","name":"genAnf","module":"Transformations.Anf.AnfGen","link":"Transformations-Anf-AnfGen.html#v:genAnf"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:TypedDeclaration\">TypedDeclaration</a> = (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>)","name":"TypedDeclaration","module":"StdLib","link":"StdLib.html#t:TypedDeclaration"},{"display_html":"<a href=\"#v:typedDecls\">typedDecls</a> :: [<a href=\"StdLib.html#t:TypedDeclaration\" title=\"StdLib\">TypedDeclaration</a>]","name":"typedDecls","module":"StdLib","link":"StdLib.html#v:typedDecls"},{"display_html":"<a href=\"#v:decls\">decls</a> :: [<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>]","name":"decls","module":"StdLib","link":"StdLib.html#v:decls"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:DeclarationWithArity\">DeclarationWithArity</a> = (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"Trees-Common.html#t:Arity\" title=\"Trees.Common\">Arity</a>)","name":"DeclarationWithArity","module":"StdLib","link":"StdLib.html#t:DeclarationWithArity"},{"display_html":"<a href=\"#v:allDeclsWithArity\">allDeclsWithArity</a> :: [<a href=\"StdLib.html#t:DeclarationWithArity\" title=\"StdLib\">DeclarationWithArity</a>]","name":"allDeclsWithArity","module":"StdLib","link":"StdLib.html#v:allDeclsWithArity"},{"display_html":"<a href=\"#v:ccAst\">ccAst</a> :: <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a>","name":"ccAst","module":"Transformations.Cc.Cc","link":"Transformations-Cc-Cc.html#v:ccAst"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Parser\">Parser</a> = <a href=\"https://hackage.haskell.org/package/megaparsec-9.6.1/docs/Text-Megaparsec.html#t:Parsec\" title=\"Text.Megaparsec\">Parsec</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Void.html#t:Void\" title=\"Data.Void\">Void</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"Parser","module":"Parser.Lexer","link":"Parser-Lexer.html#t:Parser"},{"display_html":"<a href=\"#v:sc\">sc</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> ()","name":"sc","module":"Parser.Lexer","link":"Parser-Lexer.html#v:sc"},{"display_html":"<a href=\"#v:lexeme\">lexeme</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"lexeme","module":"Parser.Lexer","link":"Parser-Lexer.html#v:lexeme"},{"display_html":"<a href=\"#v:symbol\">symbol</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"symbol","module":"Parser.Lexer","link":"Parser-Lexer.html#v:symbol"},{"display_html":"<a href=\"#v:colon\">colon</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"colon","module":"Parser.Lexer","link":"Parser-Lexer.html#v:colon"},{"display_html":"<a href=\"#v:semicolon2\">semicolon2</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"semicolon2","module":"Parser.Lexer","link":"Parser-Lexer.html#v:semicolon2"},{"display_html":"<a href=\"#v:arrow\">arrow</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"arrow","module":"Parser.Lexer","link":"Parser-Lexer.html#v:arrow"},{"display_html":"<a href=\"#v:eq\">eq</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"eq","module":"Parser.Lexer","link":"Parser-Lexer.html#v:eq"},{"display_html":"<a href=\"#v:leftPar\">leftPar</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"leftPar","module":"Parser.Lexer","link":"Parser-Lexer.html#v:leftPar"},{"display_html":"<a href=\"#v:rightPar\">rightPar</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"rightPar","module":"Parser.Lexer","link":"Parser-Lexer.html#v:rightPar"},{"display_html":"<a href=\"#v:unitLitP\">unitLitP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"unitLitP","module":"Parser.Lexer","link":"Parser-Lexer.html#v:unitLitP"},{"display_html":"<a href=\"#v:boolLitP\">boolLitP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Bool.html#t:Bool\" title=\"Data.Bool\">Bool</a>","name":"boolLitP","module":"Parser.Lexer","link":"Parser-Lexer.html#v:boolLitP"},{"display_html":"<a href=\"#v:intLitP\">intLitP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Int.html#t:Int64\" title=\"Data.Int\">Int64</a>","name":"intLitP","module":"Parser.Lexer","link":"Parser-Lexer.html#v:intLitP"},{"display_html":"<a href=\"#v:identifierP\">identifierP</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>","name":"identifierP","module":"Parser.Lexer","link":"Parser-Lexer.html#v:identifierP"},{"display_html":"<a href=\"#v:kwLet\">kwLet</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwLet","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwLet"},{"display_html":"<a href=\"#v:kwRec\">kwRec</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwRec","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwRec"},{"display_html":"<a href=\"#v:kwIn\">kwIn</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwIn","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwIn"},{"display_html":"<a href=\"#v:kwIf\">kwIf</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwIf","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwIf"},{"display_html":"<a href=\"#v:kwThen\">kwThen</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwThen","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwThen"},{"display_html":"<a href=\"#v:kwElse\">kwElse</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwElse","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwElse"},{"display_html":"<a href=\"#v:kwFun\">kwFun</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwFun","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwFun"},{"display_html":"<a href=\"#v:kwUnit\">kwUnit</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwUnit","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwUnit"},{"display_html":"<a href=\"#v:kwBool\">kwBool</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwBool","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwBool"},{"display_html":"<a href=\"#v:kwInt\">kwInt</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"kwInt","module":"Parser.Lexer","link":"Parser-Lexer.html#v:kwInt"},{"display_html":"<a href=\"#v:choice-39-\">choice'</a> :: (<a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Foldable.html#t:Foldable\" title=\"Data.Foldable\">Foldable</a> f, <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Functor.html#t:Functor\" title=\"Data.Functor\">Functor</a> f) =&gt; f (<a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a) -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"choice'","module":"Parser.Utils","link":"Parser-Utils.html#v:choice-39-"},{"display_html":"<a href=\"#v:optional-39-\">optional'</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> (<a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> a)","name":"optional'","module":"Parser.Utils","link":"Parser-Utils.html#v:optional-39-"},{"display_html":"<a href=\"#v:parens\">parens</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"parens","module":"Parser.Utils","link":"Parser-Utils.html#v:parens"},{"display_html":"<a href=\"#v:manyParens\">manyParens</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"manyParens","module":"Parser.Utils","link":"Parser-Utils.html#v:manyParens"},{"display_html":"<a href=\"#v:someParens\">someParens</a> :: <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a -&gt; <a href=\"Parser-Lexer.html#t:Parser\" title=\"Parser.Lexer\">Parser</a> a","name":"someParens","module":"Parser.Utils","link":"Parser-Utils.html#v:someParens"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Program\">Program</a> = <a href=\"#v:Program\">Program</a> [<a href=\"Parser-Ast.html#t:Statement\" title=\"Parser.Ast\">Statement</a>]","name":"Program Program","module":"Parser.Ast","link":"Parser-Ast.html#t:Program"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Statement\">Statement</a><ul class=\"subs\"><li>= <a href=\"#v:StmtDecl\">StmtDecl</a> <a href=\"Parser-Ast.html#t:Declaration\" title=\"Parser.Ast\">Declaration</a></li><li>| <a href=\"#v:StmtExpr\">StmtExpr</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li></ul>","name":"Statement StmtExpr StmtDecl","module":"Parser.Ast","link":"Parser-Ast.html#t:Statement"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Declaration\">Declaration</a><ul class=\"subs\"><li>= <a href=\"#v:DeclVar\">DeclVar</a> (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>) <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:DeclFun\">DeclFun</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> <a href=\"Trees-Common.html#t:IsRec\" title=\"Trees.Common\">IsRec</a> <a href=\"Parser-Ast.html#t:Fun\" title=\"Parser.Ast\">Fun</a></li></ul>","name":"Declaration DeclFun DeclVar","module":"Parser.Ast","link":"Parser-Ast.html#t:Declaration"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Expression\">Expression</a><ul class=\"subs\"><li>= <a href=\"#v:ExprId\">ExprId</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a></li><li>| <a href=\"#v:ExprPrimVal\">ExprPrimVal</a> <a href=\"Trees-Common.html#t:PrimitiveValue\" title=\"Trees.Common\">PrimitiveValue</a></li><li>| <a href=\"#v:ExprBinOp\">ExprBinOp</a> <a href=\"Trees-Common.html#t:BinaryOperator\" title=\"Trees.Common\">BinaryOperator</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprUnOp\">ExprUnOp</a> <a href=\"Trees-Common.html#t:UnaryOperator\" title=\"Trees.Common\">UnaryOperator</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprApp\">ExprApp</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprIte\">ExprIte</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprLetIn\">ExprLetIn</a> <a href=\"Parser-Ast.html#t:Declaration\" title=\"Parser.Ast\">Declaration</a> <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a></li><li>| <a href=\"#v:ExprFun\">ExprFun</a> <a href=\"Parser-Ast.html#t:Fun\" title=\"Parser.Ast\">Fun</a></li></ul>","name":"Expression ExprFun ExprLetIn ExprIte ExprApp ExprUnOp ExprBinOp ExprPrimVal ExprId","module":"Parser.Ast","link":"Parser-Ast.html#t:Expression"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Fun\">Fun</a> = <a href=\"#v:Fun\">Fun</a> (<a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-List-NonEmpty.html#t:NonEmpty\" title=\"Data.List.NonEmpty\">NonEmpty</a> (<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>, <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>)) (<a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a>) <a href=\"Parser-Ast.html#t:Expression\" title=\"Parser.Ast\">Expression</a>","name":"Fun Fun","module":"Parser.Ast","link":"Parser-Ast.html#t:Fun"},{"display_html":"<a href=\"#v:simplifyAst\">simplifyAst</a> :: <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a> -&gt; <a href=\"Transformations-Simplifier-SimplifiedAst.html#t:Program\" title=\"Transformations.Simplifier.SimplifiedAst\">Program</a>","name":"simplifyAst","module":"Transformations.Simplifier.Simplifier","link":"Transformations-Simplifier-Simplifier.html#v:simplifyAst"},{"display_html":"<a href=\"#v:parseProgram\">parseProgram</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Maybe.html#t:Maybe\" title=\"Data.Maybe\">Maybe</a> <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a>","name":"parseProgram","module":"Parser.Parser","link":"Parser-Parser.html#v:parseProgram"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TypeF\">TypeF</a> a<ul class=\"subs\"><li>= <a href=\"#v:TVarF\">TVarF</a> <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a></li><li>| <a href=\"#v:TUnitF\">TUnitF</a></li><li>| <a href=\"#v:TBoolF\">TBoolF</a></li><li>| <a href=\"#v:TIntF\">TIntF</a></li><li>| <a href=\"#v:TFunF\">TFunF</a> a a</li></ul>","name":"TypeF TVarF TUnitF TBoolF TIntF TFunF","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:TypeF"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:UType\">UType</a> = <a href=\"TypeChecker-HindleyMilner.html#t:UTerm\" title=\"TypeChecker.HindleyMilner\">UTerm</a> <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a> <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2.2/docs/Control-Unification-IntVar.html#t:IntVar\" title=\"Control.Unification.IntVar\">IntVar</a>","name":"UType","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:UType"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UTerm\">UTerm</a> (t :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) v <span class=\"keyword\">where</span><ul class=\"subs\"><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTVar\">UTVar</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTUnit\">UTUnit</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTBool\">UTBool</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTInt\">UTInt</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTFun\">UTFun</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li></ul>","name":"UTerm UTVar UTUnit UTBool UTInt UTFun","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:UTerm"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UTerm\">UTerm</a> (t :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) v <span class=\"keyword\">where</span><ul class=\"subs\"><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTVar\">UTVar</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTUnit\">UTUnit</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTBool\">UTBool</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTInt\">UTInt</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTFun\">UTFun</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li></ul>","name":"UTerm UTVar UTUnit UTBool UTInt UTFun","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:UTerm"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UTerm\">UTerm</a> (t :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) v <span class=\"keyword\">where</span><ul class=\"subs\"><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTVar\">UTVar</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTUnit\">UTUnit</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTBool\">UTBool</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTInt\">UTInt</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTFun\">UTFun</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li></ul>","name":"UTerm UTVar UTUnit UTBool UTInt UTFun","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:UTerm"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UTerm\">UTerm</a> (t :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) v <span class=\"keyword\">where</span><ul class=\"subs\"><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTVar\">UTVar</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTUnit\">UTUnit</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTBool\">UTBool</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTInt\">UTInt</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTFun\">UTFun</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li></ul>","name":"UTerm UTVar UTUnit UTBool UTInt UTFun","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:UTerm"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:UTerm\">UTerm</a> (t :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Kind.html#t:Type\" title=\"Data.Kind\">Type</a>) v <span class=\"keyword\">where</span><ul class=\"subs\"><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTVar\">UTVar</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTUnit\">UTUnit</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTBool\">UTBool</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTInt\">UTInt</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li><li><span class=\"keyword\">pattern</span> <a href=\"#v:UTFun\">UTFun</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a></li></ul>","name":"UTerm UTVar UTUnit UTBool UTInt UTFun","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:UTerm"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:Poly\">Poly</a> t = <a href=\"#v:Forall\">Forall</a> [<a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>] t","name":"Poly Forall","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:Poly"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Polytype\">Polytype</a> = <a href=\"TypeChecker-HindleyMilner.html#t:Poly\" title=\"TypeChecker.HindleyMilner\">Poly</a> Type","name":"Polytype","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:Polytype"},{"display_html":"<a href=\"#v:toUType\">toUType</a> :: <a href=\"Trees-Common.html#t:Type\" title=\"Trees.Common\">Type</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"toUType","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:toUType"},{"display_html":"<a href=\"#v:toPolytype\">toPolytype</a> :: UPolytype -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Polytype\" title=\"TypeChecker.HindleyMilner\">Polytype</a>","name":"toPolytype","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:toPolytype"},{"display_html":"<span class=\"keyword\">type</span> <a href=\"#t:Infer\">Infer</a> = <a href=\"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-Reader.html#t:ReaderT\" title=\"Control.Monad.Reader\">ReaderT</a> Ctx (<a href=\"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-Except.html#t:ExceptT\" title=\"Control.Monad.Except\">ExceptT</a> <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a> (<a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2.2/docs/Control-Unification-IntVar.html#t:IntBindingT\" title=\"Control.Unification.IntVar\">IntBindingT</a> <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a> <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Functor-Identity.html#t:Identity\" title=\"Data.Functor.Identity\">Identity</a>))","name":"Infer","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:Infer"},{"display_html":"<a href=\"#v:lookup\">lookup</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"lookup","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:lookup"},{"display_html":"<a href=\"#v:withBinding\">withBinding</a> :: <a href=\"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-Reader-Class.html#t:MonadReader\" title=\"Control.Monad.Reader.Class\">MonadReader</a> Ctx m =&gt; <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; UPolytype -&gt; m a -&gt; m a","name":"withBinding","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:withBinding"},{"display_html":"<a href=\"#v:fresh\">fresh</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"fresh","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:fresh"},{"display_html":"<span class=\"keyword\">data</span> <a href=\"#t:TypeError\">TypeError</a> <span class=\"keyword\">where</span><ul class=\"subs\"><li><a href=\"#v:Unreachable\">Unreachable</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:UnboundVar\">UnboundVar</a> :: <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:Infinite\">Infinite</a> :: <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2.2/docs/Control-Unification-IntVar.html#t:IntVar\" title=\"Control.Unification.IntVar\">IntVar</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:ImpossibleBinOpApplication\">ImpossibleBinOpApplication</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:ImpossibleUnOpApplication\">ImpossibleUnOpApplication</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li><li><a href=\"#v:Mismatch\">Mismatch</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeF\" title=\"TypeChecker.HindleyMilner\">TypeF</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a></li></ul>","name":"TypeError UnboundVar Unreachable Infinite ImpossibleBinOpApplication ImpossibleUnOpApplication Mismatch","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#t:TypeError"},{"display_html":"<a href=\"#v:-61-:-61-\">(=:=)</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"=:=","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:-61-:-61-"},{"display_html":"<a href=\"#v:applyBindings\">applyBindings</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a>","name":"applyBindings","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:applyBindings"},{"display_html":"<a href=\"#v:mkVarName\">mkVarName</a> :: <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-String.html#t:String\" title=\"Data.String\">String</a> -&gt; <a href=\"https://hackage.haskell.org/package/unification-fd-0.11.2.2/docs/Control-Unification-IntVar.html#t:IntVar\" title=\"Control.Unification.IntVar\">IntVar</a> -&gt; <a href=\"Trees-Common.html#t:Identifier\" title=\"Trees.Common\">Identifier</a>","name":"mkVarName","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:mkVarName"},{"display_html":"<a href=\"#v:generalize\">generalize</a> :: <a href=\"TypeChecker-HindleyMilner.html#t:UType\" title=\"TypeChecker.HindleyMilner\">UType</a> -&gt; <a href=\"TypeChecker-HindleyMilner.html#t:Infer\" title=\"TypeChecker.HindleyMilner\">Infer</a> UPolytype","name":"generalize","module":"TypeChecker.HindleyMilner","link":"TypeChecker-HindleyMilner.html#v:generalize"},{"display_html":"<a href=\"#v:checkProgram\">checkProgram</a> :: <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a> ()","name":"checkProgram","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:checkProgram"},{"display_html":"<a href=\"#v:inferProgram\">inferProgram</a> :: <a href=\"Parser-Ast.html#t:Program\" title=\"Parser.Ast\">Program</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"TypeChecker-HindleyMilner.html#t:TypeError\" title=\"TypeChecker.HindleyMilner\">TypeError</a> <a href=\"TypeChecker-HindleyMilner.html#t:Polytype\" title=\"TypeChecker.HindleyMilner\">Polytype</a>","name":"inferProgram","module":"TypeChecker.TypeChecker","link":"TypeChecker-TypeChecker.html#v:inferProgram"},{"display_html":"<span class=\"keyword\">newtype</span> <a href=\"#t:Module\">Module</a> = <a href=\"#v:Module\">Module</a> {<ul class=\"subs\"><li><a href=\"#v:code\">code</a> :: <a href=\"Transformations-Anf-Anf.html#t:Program\" title=\"Transformations.Anf.Anf\">Program</a></li></ul>}","name":"Module Module code","module":"CodeGen.Module","link":"CodeGen-Module.html#t:Module"},{"display_html":"<a href=\"#v:compileToModule\">compileToModule</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/mtl-2.3.1/docs/Control-Monad-Except.html#t:Except\" title=\"Control.Monad.Except\">Except</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> <a href=\"CodeGen-Module.html#t:Module\" title=\"CodeGen.Module\">Module</a>","name":"compileToModule","module":"CodeGen.Module","link":"CodeGen-Module.html#v:compileToModule"},{"display_html":"<a href=\"#v:ppRiscVAsm\">ppRiscVAsm</a> :: <a href=\"CodeGen-Module.html#t:Module\" title=\"CodeGen.Module\">Module</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"ppRiscVAsm","module":"CodeGen.RiscV.AsmGen","link":"CodeGen-RiscV-AsmGen.html#v:ppRiscVAsm"},{"display_html":"<a href=\"#v:compileToRiscVAsm\">compileToRiscVAsm</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:FilePath\" title=\"System.IO\">FilePath</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> (<a href=\"CodeGen-TimedValue.html#t:TimedValue\" title=\"CodeGen.TimedValue\">TimedValue</a> (<a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> ()))","name":"compileToRiscVAsm","module":"CodeGen.RiscV.Runner","link":"CodeGen-RiscV-Runner.html#v:compileToRiscVAsm"},{"display_html":"<a href=\"#v:genLlvmIrModule\">genLlvmIrModule</a> :: <a href=\"CodeGen-Module.html#t:Module\" title=\"CodeGen.Module\">Module</a> -&gt; <a href=\"https://hackage.haskell.org/package/llvm-codegen-0.1.0.0/docs/LLVM-Codegen-ModuleBuilder.html#t:Module\" title=\"LLVM.Codegen.ModuleBuilder\">Module</a>","name":"genLlvmIrModule","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:genLlvmIrModule"},{"display_html":"<a href=\"#v:ppLlvmModule\">ppLlvmModule</a> :: <a href=\"https://hackage.haskell.org/package/llvm-codegen-0.1.0.0/docs/LLVM-Codegen-ModuleBuilder.html#t:Module\" title=\"LLVM.Codegen.ModuleBuilder\">Module</a> -&gt; <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a>","name":"ppLlvmModule","module":"CodeGen.Llvm.LlvmIrGen","link":"CodeGen-Llvm-LlvmIrGen.html#v:ppLlvmModule"},{"display_html":"<a href=\"#v:run\">run</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> <a href=\"CodeGen-RunResult.html#t:RunResult\" title=\"CodeGen.RunResult\">RunResult</a>","name":"run","module":"CodeGen.Llvm.Runner","link":"CodeGen-Llvm-Runner.html#v:run"},{"display_html":"<a href=\"#v:compileToBinary\">compileToBinary</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:FilePath\" title=\"System.IO\">FilePath</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> (<a href=\"CodeGen-TimedValue.html#t:TimedValue\" title=\"CodeGen.TimedValue\">TimedValue</a> (<a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> ()))","name":"compileToBinary","module":"CodeGen.Llvm.Runner","link":"CodeGen-Llvm-Runner.html#v:compileToBinary"},{"display_html":"<a href=\"#v:compileToLlvmIr\">compileToLlvmIr</a> :: <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:FilePath\" title=\"System.IO\">FilePath</a> -&gt; <a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/System-IO.html#t:IO\" title=\"System.IO\">IO</a> (<a href=\"CodeGen-TimedValue.html#t:TimedValue\" title=\"CodeGen.TimedValue\">TimedValue</a> (<a href=\"https://hackage.haskell.org/package/base-4.17.2.1/docs/Data-Either.html#t:Either\" title=\"Data.Either\">Either</a> <a href=\"https://hackage.haskell.org/package/text-2.0.2/docs/Data-Text.html#t:Text\" title=\"Data.Text\">Text</a> ()))","name":"compileToLlvmIr","module":"CodeGen.Llvm.Runner","link":"CodeGen-Llvm-Runner.html#v:compileToLlvmIr"}]